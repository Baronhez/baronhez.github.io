<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>blogHez</title>
    <link href="https://baronhez.github.io/feed.xml" rel="self" />
    <link href="https://baronhez.github.io" />
    <updated>2022-08-31T05:47:11+02:00</updated>
    <author>
        <name>Jonathan Ródenas López</name>
    </author>
    <id>https://baronhez.github.io</id>

    <entry>
        <title>How to clean your Docker.</title>
        <author>
            <name>Jonathan Ródenas López</name>
        </author>
        <link href="https://baronhez.github.io/how-to-clean-your-docker/"/>
        <id>https://baronhez.github.io/how-to-clean-your-docker/</id>
            <category term="Docker"/>

        <updated>2022-08-31T04:20:22+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://baronhez.github.io/media/posts/16/woman-collects-leaves-cleans-park.jpg" alt="" />
                    I'm not&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://baronhez.github.io/media/posts/16/woman-collects-leaves-cleans-park.jpg" alt="" />
                
    <h2 id="im-not-joking-do-it-you-will-thank-me-later" class="align-center">
      I'm not joking, do it, you will thank me later.
    </h2>

  <p>
    The faster way of doing this is using the CLI. I explained how to do it in my <a href="https://baronhez.github.io/b/" target="_blank">Self-Hosting guide</a>, but I'm going to sum it up here.
  </p>
<pre class="line-numbers  language-bash"><code># We can delete all stoped container, every network not use by al least one container, all dangling images and all dangling build cache.
docker system prune
# We can delete all stoped container, every network not use by al least one container, every unused image and all build cache.
docker system prune -a
# Do the same but filtering specific images
docker system prune --filter nginx:alpine
# Or just the volumes
docker system prune --volumes # First way
docker volume prune # Second way
# Or just the networks
docker volume prune
# Or we can do the same but without asking for confirmation
docker system prune -a -f  </code></pre>

  <p>
    That's it, nice and fast.
  </p>

    <h2 id="credits">
      Credits
    </h2>

  <p>
    <a href="https://wise.wtf/posts/docker-cleaning/" target="_blank">https://wise.wtf/posts/docker-cleaning/</a>
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Different uses for Docker</title>
        <author>
            <name>Jonathan Ródenas López</name>
        </author>
        <link href="https://baronhez.github.io/different-uses-for-docker/"/>
        <id>https://baronhez.github.io/different-uses-for-docker/</id>
            <category term="Docker"/>

        <updated>2022-08-31T04:20:30+02:00</updated>
            <summary>
                <![CDATA[
                    A month&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                
  <p>
    A month ago, I read a post in <a href="https://matt-rickard.com/non-obvious-docker-uses" target="_blank" rel="nofollow noopener">Matt Rickard blog</a>&nbsp;about Docker uses barely known among Docker users. So here I am, sharing that knowledge with you, wise reader.
  </p>

    <h2 id="you-can-use-docker-as-a-compiler">
      You can use Docker as a compiler.
    </h2>

  <p>
    <a href="https://docs.docker.com/engine/reference/commandline/build/#custom-build-outputs" target="_blank" rel="nofollow noopener">Here</a> is the official documentation about this use case.&nbsp;
  </p>

  <p>
    Instead of exporting the build artifacts as a Docker image, you can do it as files on the local filesystem, which can be helpful for producing local binaries, code generation, etc.
  </p>

  <p>
    For example, we can use docker to export the artifact to a tar file:
  </p>

  <p>
    
  </p>
<pre class="line-numbers  language-bash"><code>docker build --output type=local,dest=out .</code></pre>

  <p>
    Feel free to visit the documentation for further information.
  </p>

    <h2 id="you-can-use-docker-build-a-taskrunner-alternative-tonbspimakei">
      You can use Docker build a task-runner alternative to&nbsp;<i>make.</i>
    </h2>

  <p>
    Matt points in his post that, thanks to Docker Buildkit,&nbsp;you can write alternative frontends to build images, not only Dockerfiles. This functionality is described <a href="https://matt-rickard.com/building-a-new-dockerfile-frontend" target="_blank" rel="nofollow noopener">here</a>.
  </p>

    <h2 id="you-can-use-docker-registry-to-store-tarballs">
      You can use Docker registry to store tarballs.
    </h2>

  <p>
    Because docker registries only store tarballs and metadata, it is easy to set up a place to store configuration.
  </p>

    <h2 id="you-can-use-git-repositories-as-docker-images">
      You can use git repositories as Docker images
    </h2>

  <p>
    Matt points this possibility in this <a href="https://matt-rickard.com/docker-merge/" target="_blank" rel="nofollow noopener">post</a>. To sum it up, "Docker merge is a CLI utility that provides a proof-of-concept strategy to merge docker images".
  </p>

  <p>
    So, you can use that tool to&nbsp;to hijack the "git merge" strategies to natively "merge" docker layers.
  </p>

    <h2 id="you-can-use-docker-a-crossplatform-compatibility-layer">
      You can use Docker a cross-platform compatibility layer.
    </h2>

  <p>
    The most obvious case for this is the use of Docker Desktop (if you are using this in your company, use Rancher instead).
  </p>

    <h2 id="you-can-use-docker-to-build-linux-kernels">
      You can use Docker to build Linux kernels
    </h2>

  <p>
    You can do it by using <a href="https://github.com/linuxkit/linuxkit" target="_blank" rel="nofollow noopener">LinuxKit</a>.
  </p>

  <p>
    Those where the examples mentioned in the post, I hope you find them useful!
  </p>

    <h2 id="credits">
      Credits
    </h2>

  <p>
    <a href="https://matt-rickard.com/" target="_blank" rel="nofollow noopener">Matt Rickard</a>
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Docker-Compose Best Practices</title>
        <author>
            <name>Jonathan Ródenas López</name>
        </author>
        <link href="https://baronhez.github.io/docker-compose-best-practices/"/>
        <id>https://baronhez.github.io/docker-compose-best-practices/</id>
            <category term="Docker-compose"/>
            <category term="Docker"/>

        <updated>2022-08-31T03:24:15+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://baronhez.github.io/media/posts/14/Docker-Logo-2.png" alt="" />
                    Or "The&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://baronhez.github.io/media/posts/14/Docker-Logo-2.png" alt="" />
                
    <h2 id="or-the-best-way-to-use-dockercompose-pick-your-poison-">
      Or "The best way to use Docker-Compose", pick your poison. 
    </h2>

  <p>
    Ok, I get it. You want to use Docker-Compose in your working environment, but you don't want to destroy everything in the process, and at the same time, get the most out of it.
  </p>

  <p>
    Here you go, 6 easy-to-follow tips for you, fellow DevOps!
  </p>

    <h2 id="tip-1-do-not-rebuild-your-image-each-time-you-make-a-change-in-code-use-volumes-instead">
      Tip #1: Do NOT rebuild your image each time you make a change in code, use volumes instead.
    </h2>

  <p>
    One of my best friends was having a hard time a few months ago, because every time he had to change a line in his python program, he had to rebuild the docker image, and then deploy that new image to the server (what 0 CI/CD pipelines do to a man, hehe).
  </p>

  <p>
    The answer to that problem was to use volumes from the beginning. If you, wise reader, save the code in a directory and then, when building the image, use that directory as the volume, the only thing you will have to do to apply the changes made to the code is to restart the container. 
  </p>

  <p>
    The most easy-to-see example is a nginx image. Save your .html page in a directory, mount that directory as a volume, like:
  </p>
<pre class="line-numbers  language-yaml"><code> volumes:
      - /home/example/index.html:/usr/share/nginx/html:ro</code></pre>

  <p>
    And then, build and deploy that image as a container.
  </p>

  <p>
    If you want to make a change to your web page, change the index.html file and then restart the container. You will see the changes immediately.&nbsp;
  </p>

    <h2 id="tip-2-be-smart-do-not-write-the-same-file-two-times-for-dev-and-prod">
      Tip #2: Be smart, do NOT write the same file two times for dev and prod.
    </h2>

  <p>
    Ok, assuming that you are developing and application, and you need to use some kind of <a href="https://webpack.js.org/" target="_blank" rel="nofollow noopener">Webpack</a> or a PostgresDB ONLY in the dev environment... well, you can use the same docker-compose.yml file and the same .env file, but making a lot of changes each time you have to deploy to prod... On the other hand, that's annoying and awful, so, let's use an override file!
  </p>

  <p>
    But what is an override file and why is it so useful in this case?
  </p>

  <p>
    Well, imagine that you have a file like this one:
  </p>
<pre class="line-numbers  language-yaml"><code># docker-compose.yml
web:
  image: example/my_web_app:latest
  depends_on:
    - db
    - cache

db:
  image: postgres:latest

cache:
  image: redis:latest
</code></pre>

  <p>
    If you, for testing purposes, want to deploy this application while exposing some ports, mount your code as a volume, and build the web image, then you should use this override file:
  </p>
<pre class="line-numbers  language-yaml"><code># docker-compose.override.yml
web:
  build: .
  volumes:
    - '.:/code'
  ports:
    - 8883:80
  environment:
    DEBUG: 'true'

db:
  command: '-d'
  ports:
    - 5432:5432

cache:
  ports:
    - 6379:6379
</code></pre>

  <p>
    Then, while having both files in the same directory, run:
  </p>
<pre class="line-numbers  language-bash"><code>docker-compose up</code></pre>

  <p>
    Now, watch in amazement as the services of both archives are deployed at the same time. The reason is that docker-compose search in the current directory for a file named <b>docker-compose.yml</b> or <b>docker-compose.yaml</b>. Then, search for a file name <b>docker-compose.override.yml</b>. Finally, deploys the services contained in both files.
  </p>

  <p>
    This is really useful, because if you want to not expose those ports in prod, it is as simple as renaming the override file with any other name. By doing this, we will be deploying only the services in the <b>docker-compose.yml </b>file.&nbsp;
  </p>

  <p>
    You can use this in many ways. For instance, you can have a docker-compose.override.example.yml which you can change and rename as <b>docker-compose.override.yml</b>&nbsp;everytime you need to test something in dev. It is similar to when we use a <b>.env-example</b> file. In the <b>.env-example</b> file we have some default or null values which we can change when creating a <b>.env </b>file.
  </p>

  <p>
    Another use for the override file is when we are deploying an application in some cloud provider, such as AWS or GCP, which provides some service, as postgres management. If we want to use our own postgres in dev environment, we can use an <b>docker-compose-override.yml </b>file with the postgres service, while in prod, we only use the <b>docker-compose.yml</b>.
  </p>

  <p>
    Another way to get modularity is to use the command line:
  </p>
<pre class="line-numbers  language-yaml"><code># service.yml
services:
  service:
    image: my-image:latest</code></pre>
<pre class="line-numbers  language-yaml"><code># service-dev.yml
services:
  service:
    environment:
      - DEV_MODE=true</code></pre>
<pre class="line-numbers  language-bash"><code>docker-compose -f service.yml -f service-dev.yml up -d</code></pre>

    <h5 id="credits-for-this-part">
      Credits for this part:
    </h5>

  <p>
    <a href="https://www.youtube.com/watch?v=jGePPQFArwo" target="_blank" rel="nofollow noopener">https://www.youtube.com/watch?v=jGePPQFArwo</a>
  </p>

  <p>
    <a href="https://docs.docker.com/compose/extends/" target="_blank" rel="nofollow noopener">https://docs.docker.com/compose/extends/</a>
  </p>

  <p>
    <a href="https://www.howtogeek.com/devops/how-to-simplify-docker-compose-files-with-yaml-anchors-and-extensions/" target="_blank" rel="nofollow noopener">https://www.howtogeek.com/devops/how-to-simplify-docker-compose-files-with-yaml-anchors-and-extensions/</a>
  </p>

    <h2 id="tip-3-be-lazy-do-not-rewrite-the-same-yaml-parts-over-and-over">
      Tip #3: Be lazy, do NOT rewrite the same yaml parts over and over.
    </h2>

  <p>
    Use YAML Archors&nbsp;for your yaml files if you are using over and over again the same yaml names or steps.
  </p>

  <p>
    There are 2 parts to this:
  </p>

  <ul>
    <li>The anchor '&amp;' which defines a chunk of configuration.<br></li><li>The alias '*' used to refer to that chunk elsewhere.<br></li>
  </ul>
<pre class="line-numbers  language-yaml"><code>services:
  httpd:
    image: httpd:latest
    restart: &restartpolicy unless-stopped
  mysql:
    image: mysql:latest
    restart: *restartpolicy</code></pre>

  <p>
    You can reuse multiple lines:
  </p>
<pre class="line-numbers  language-yaml"><code>services:
  first:
    image: my-image:latest
    environment: &env
      - CONFIG_KEY
      - EXAMPLE_KEY
      - DEMO_VAR
  second:
    image: another-image:latest
    environment: *env</code></pre>

  <p>
    Or even extend those chunks of configuration:
  </p>
<pre class="line-numbers  language-yaml"><code>services:
  image: my-image:latest
    environment: &env
      - CONFIG_KEY
      - EXAMPLE_KEY
      - DEMO_VAR      
  second:
    image: another-image:latest
    environment:
      &lt;&lt;: *env
      - AN_EXTRA_KEY
      - SECOND_SPECIFIC_KEY  </code></pre>

  <p>
    You can use Yaml Archors with Extension fields, because yaml&nbsp;parser will ignore extension fields prefixed with x-. This way, you can reuse, as I mentioned before, chunks of configuration to share configuration:
  </p>
<pre class="line-numbers  language-yaml"><code>x-env: &env
  environment:
    - CONFIG_KEY
    - EXAMPLE_KEY
 
services:
  first:
    &lt;&lt;: *env
    image: my-image:latest
  second:
    &lt;&lt;: *env
    image: another-image:latest  </code></pre>

  <p class="msg msg--warning">
    YAML anchors and aliases cannot contain the ' [ ', ' ] ', ' { ', ' } ', and ' , ' characters.
  </p>

  <p>
    Here is a <a href="https://www.howtogeek.com/devops/how-to-simplify-docker-compose-files-with-yaml-anchors-and-extensions/" target="_blank" rel="nofollow noopener" class="" data-link-popup-id="1661906797091">guide</a>, which is the one I used to write this tip.
  </p>

    <h2 id="tip-4-do-not-forget-to-refresh-environment-variables">
      Tip #4: Do NOT forget to refresh environment variables.
    </h2>

  <p>
    Set the restart behavior to <u>restart: always</u>&nbsp;and configure your services with update_config: true. This way, your environment variables will be refreshed each run.
  </p>

    <h2 id="tip-5-do-not-use-docker-rm-f-when-cleaning-up-docker-images">
      Tip #5: Do NOT use "docker rm -f" when cleaning up docker images.
    </h2>

  <p>
    Use this instead:
  </p>
<pre class="line-numbers  language-bash"><code>docker rm -f --remove-orphans</code></pre>

  <p>
    Regardless of whether we or a running container utilizes them, the "--remove-ophans" flag guarantees that Docker Compose only removes containers and images that are no longer in use.
  </p>

    <h2 id="tip-6-do-not-let-your-containers-consume-as-much-memory-and-cpu-as-they-want">
      Tip #6: Do NOT let your containers consume as much memory and CPU as they want.
    </h2>

  <p>
    Although it may seem unusual and silly, you shouldn't allow any container use all the resources it needs.
  </p>

  <p>
    You can do this by setting limits:
  </p>
<pre class="line-numbers  language-yaml"><code># docker-compose.yml
web:
  deploy:
    resources:
      limits:
        cpus: "1"
</code></pre>

  <p class="msg msg--highlight">
    Before setting these limits, you should know how many resources your services may need to function properly.
  </p>

  <p>
    And those were the best practices I wanted to share with you, fellow DevOps folks. I hope you find them useful.
  </p>

    <h2 id="credits">
      Credits
    </h2>

  <p>
    <a href="https://prod.releasehub.com/blog/6-docker-compose-best-practices-for-dev-and-prod" target="_blank" rel="nofollow noopener">https://prod.releasehub.com/blog/6-docker-compose-best-practices-for-dev-and-prod</a>
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How to get a free VPS in Oracle Cloud</title>
        <author>
            <name>Jonathan Ródenas López</name>
        </author>
        <link href="https://baronhez.github.io/how-to-get-a-free-vps-in-oracle-cloud/"/>
        <id>https://baronhez.github.io/how-to-get-a-free-vps-in-oracle-cloud/</id>
            <category term="Self-hosted"/>

        <updated>2022-08-31T01:25:26+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://baronhez.github.io/media/posts/13/oracle-cloud.png" alt="" />
                    How to&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://baronhez.github.io/media/posts/13/oracle-cloud.png" alt="" />
                
  <p>
    How to get a free VPS in Oracle Cloud with 4 cores, 24 GB of memory and 200 GB of capacity.
  </p>

  <p>
    I'll describe how to set up a free virtual server using Oracle Cloud in this post; you may choose to use these machines to test web applications that require a lot more power than shared hosting, or even to mount your own server, to deploy services using docker or Kubernetes.&nbsp;
  </p>

  <p>
    First, you will need to create an account at <a href="https://www.oracle.com/cloud/sign-in.html" target="_blank" rel="nofollow noopener">https://www.oracle.com/cloud/sign-in.html</a> with an email address and bank card number (don't worry, it's just to check if your account is real, this is still free, they will charge you around 1$ and then they will give it back to you).
  </p>

  <p>
    You must enter the administration console and select the option "Create a VM instance":
  </p>

    <figure class="post__image post__image--full">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/13/oracle.PNG" sizes="100vw" srcset="https://baronhez.github.io/media/posts/13/responsive/oracle-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/oracle-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/oracle-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/oracle-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/oracle-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/oracle-2xl.PNG 1600w"  height="510" width="1264" alt="" />
      <figcaption>Pick that one.</figcaption>
    </figure>

  <p>
    Set the instance name next:
  </p>

    <figure class="post__image post__image--wide">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/13/instance-2.PNG" sizes="100vw" srcset="https://baronhez.github.io/media/posts/13/responsive/instance-2-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/instance-2-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/instance-2-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/instance-2-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/instance-2-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/instance-2-2xl.PNG 1600w"  height="174" width="901" alt="" />
      
    </figure>

  <p>
    Now, placement:
  </p>

    <figure class="post__image post__image--wide">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/13/instance-3.PNG" sizes="100vw" srcset="https://baronhez.github.io/media/posts/13/responsive/instance-3-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/instance-3-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/instance-3-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/instance-3-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/instance-3-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/instance-3-2xl.PNG 1600w"  height="145" width="1081" alt="" />
      <figcaption>Leave it as it is</figcaption>
    </figure>

  <p>
    The following part is important:
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/13/1.PNG" sizes="100vw" srcset="https://baronhez.github.io/media/posts/13/responsive/1-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/1-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/1-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/1-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/1-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/1-2xl.PNG 1600w"  height="281" width="1642" alt="" />
      <figcaption>Click in "Change image"</figcaption>
    </figure>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/13/1-2.PNG" sizes="100vw" srcset="https://baronhez.github.io/media/posts/13/responsive/1-2-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/1-2-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/1-2-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/1-2-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/1-2-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/1-2-2xl.PNG 1600w"  height="114" width="367" alt="" />
      <figcaption>Select "Canonical Ubuntu"</figcaption>
    </figure>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/13/1-3.PNG" sizes="100vw" srcset="https://baronhez.github.io/media/posts/13/responsive/1-3-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/1-3-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/1-3-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/1-3-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/1-3-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/1-3-2xl.PNG 1600w"  height="61" width="224" alt="" />
      <figcaption>Click on "Select image" at the bottom of the screen.</figcaption>
    </figure>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/13/1-5.PNG" sizes="100vw" srcset="https://baronhez.github.io/media/posts/13/responsive/1-5-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/1-5-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/1-5-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/1-5-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/1-5-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/1-5-2xl.PNG 1600w"  height="180" width="1625" alt="" />
      <figcaption>Click on "Change shape"</figcaption>
    </figure>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/13/1-4.PNG" sizes="100vw" srcset="https://baronhez.github.io/media/posts/13/responsive/1-4-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/1-4-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/1-4-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/1-4-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/1-4-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/1-4-2xl.PNG 1600w"  height="137" width="1654" alt="" />
      <figcaption>Click on "Ampere" option</figcaption>
    </figure>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/13/1-6.PNG" sizes="100vw" srcset="https://baronhez.github.io/media/posts/13/responsive/1-6-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/1-6-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/1-6-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/1-6-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/1-6-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/1-6-2xl.PNG 1600w"  height="233" width="1584" alt="" />
      <figcaption>Set it to the maximum "4 cores, 24 GB memory"</figcaption>
    </figure>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/13/1-7.PNG" sizes="100vw" srcset="https://baronhez.github.io/media/posts/13/responsive/1-7-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/1-7-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/1-7-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/1-7-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/1-7-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/1-7-2xl.PNG 1600w"  height="55" width="216" alt="" />
      <figcaption>Then, once again, click on "Select shape"</figcaption>
    </figure>

  <p>
    Now, generate a SSH key pair. If you do not know how to do it, go to <a href="https://baronhez.github.io/how-to-configure-ssh-to-be-secure/" target="_blank">my post about SSH</a> and learn how to do it.
  </p>

  <p>
    Once you have your SSH key pair fresh, regardless of the operating system you are using, check this option and upload your public key:
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/13/1-8.PNG" sizes="100vw" srcset="https://baronhez.github.io/media/posts/13/responsive/1-8-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/1-8-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/1-8-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/1-8-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/1-8-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/1-8-2xl.PNG 1600w"  height="236" width="956" alt="" />
      <figcaption>Click on "Upload public key files (.pub)"</figcaption>
    </figure>

  <p>
    Location of your SSH keys in different OS:
  </p>

  <ul>
    <li><b>Windows:</b> Should be in <i>%userprofile%\.shh</i></li><li><b>Linux:</b>&nbsp;<i>~/.ssh&nbsp;</i></li><li><b>MacOS:</b>&nbsp;<i>~/.ssh</i>&nbsp;</li>
  </ul>

  <p>
    Upload the file named <b>id_rsa.pub</b> (this is the default name, if you haven't changed it).
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/13/1-9.PNG" sizes="100vw" srcset="https://baronhez.github.io/media/posts/13/responsive/1-9-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/1-9-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/1-9-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/1-9-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/1-9-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/1-9-2xl.PNG 1600w"  height="140" width="749" alt="" />
      <figcaption>Click on "Specify a custom boot volume size" and then set that to 200 GB.</figcaption>
    </figure>

  <p>
    Once the instance configuration is finished, you should see something like this:
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/13/1-10.PNG" sizes="100vw" srcset="https://baronhez.github.io/media/posts/13/responsive/1-10-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/1-10-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/1-10-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/1-10-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/1-10-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/1-10-2xl.PNG 1600w"  height="318" width="701" alt="" />
      <figcaption>Now that your instance is up and running, it is time to connect via SSH.</figcaption>
    </figure>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/13/1-12.PNG" sizes="100vw" srcset="https://baronhez.github.io/media/posts/13/responsive/1-12-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/1-12-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/1-12-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/1-12-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/1-12-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/1-12-2xl.PNG 1600w"  height="109" width="320" alt="" />
      <figcaption>Use your public IP to connect to your server.</figcaption>
    </figure>

  <p>
    If you don't know how to use SSH:
  </p>

  <p>
    <b>On Linux and MacOS</b>, you should use open-ssh (it is pre-installed in most cases).
  </p>
<pre class="line-numbers  language-bash"><code>ssh ubuntu@&lt;your-ip&gt;</code></pre>

  <p>
    On Windows, use Powershell (Powershell has open-ssh pre-installed, or at least that's the case on my machine. Use something like <a href="https://www.siteground.com/tutorials/ssh/putty/" target="_blank" rel="nofollow noopener">Putty</a> if you get lost following this step).
  </p>
<pre class="line-numbers  language-bash"><code>ssh ubuntu@&lt;your-ip&gt; # same as Linux and MacOS</code></pre>

  <p>
    And that's it, folks! Now you have a free vps with 4 cores, 24 GB of memory, 200 GB of capacity in like 5 minutes more or less. Ease peasy.
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Self-Hosting Guide</title>
        <author>
            <name>Jonathan Ródenas López</name>
        </author>
        <link href="https://baronhez.github.io/b/"/>
        <id>https://baronhez.github.io/b/</id>
            <category term="Self-hosted"/>
            <category term="SSH"/>
            <category term="Docker"/>

        <updated>2022-08-31T01:26:50+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://baronhez.github.io/media/posts/11/young-man-engineer-making-program-analyses.jpg" alt="" />
                    I know,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://baronhez.github.io/media/posts/11/young-man-engineer-making-program-analyses.jpg" alt="" />
                
  <p>
    I know, you want to self host, for instance, your own webpage, but every time you search for info, people only recommend you to use sh*t like NO-IP and third party providers such as Heroku. But that's not what you want, right? You have a Rashberry Pi or somo old PC and you intent to host your own services, like your webpage, a torrent server or even some filebrowser to manage storage.
  </p>

  <p>
    Ok, then I will save you a lot of hours or researching how to mount everything, how to deal with nginx, how to get https certificates... and I will show you the best way of setting up everything.
  </p>

    <h2 id="prepare-your-server-machine">
      Prepare your server machine
    </h2>

  <p>
    Firtsly, I will start by getting an ISO of Ubuntu Server (you can use another ISOs, like arch linux or Nix, if you are brave enough).&nbsp;
  </p>

  <p>
    <a href="https://releases.ubuntu.com/22.04.1/ubuntu-22.04.1-live-server-amd64.iso" target="_blank" class="" rel="nofollow noopener">https://releases.ubuntu.com/22.04.1/ubuntu-22.04.1-live-server-amd64.iso</a>
  </p>

  <p>
    Then, use some program, like <a href="https://github.com/pbatard/rufus/releases/download/v3.17/rufus-3.17.exe" target="_blank" class="" rel="nofollow noopener">Rufus</a> or <a href="https://www.balena.io/etcher/" target="_blank" class="" rel="nofollow noopener">Balena Etcher</a> to flash that ISO into an USB or SD Card (in case you're using a Rashberry Pi).
  </p>

  <p>
    If you are not familiar with this, take a look into <a href="https://www.youtube.com/watch?v=Wt0Q-DBejIw" target="_blank" class="" rel="nofollow noopener">this tutorial</a>.
  </p>

  <p>
    Ok, now we have an USB or SD Card flashed with our favourite OS for our server. Now it is time to insert that into the server we will be using. If it's possible I recommend you to connect that device to a monitor, in order to see what is happening and make some SSH configurations.
  </p>

  <p>
    Once the operating system is installed, we will create a new user and get rid of the default user. (Using the root user for everything is a bad idea).
  </p>
<pre class="line-numbers  language-bash"><code>sudo adduser Username
sudo usermod -aG sudo Username
</code></pre>

    <h2 id="how-to-connect-to-our-machine">
      How to connect to our machine
    </h2>

  <p>
    Next, we will configure SSH to be able to connect to our device from another pc. This way it is easier to manage the server (and we will be able to disconnect the monitor from the server).
  </p>

  <p>
    I have another guide about how configure SSH to be secure and ready to use, go ahead a <a href="https://baronhez.github.io/how-to-configure-ssh-to-be-secure/" target="_blank" class="">check it</a>.
  </p>

    <h2 id="unattended-upgrades-optional">
      Unattended upgrades (optional)
    </h2>

  <p class="msg msg--highlight">
    If you don't want automated updates, skip this section.
  </p>

  <p>
    Ok, now that we are able to connect to the server using SSH, and SSH is configure to be secure, it is time to install our first packages.
  </p>
<pre class="line-numbers  language-bash"><code>sudo apt install unattended-upgrades
dpkg-reconfigure --priority=low unattended-upgrades
# Now, select yes to enable unattended-upgrades.
# Once you finish with that, you can change some lines in the configuration of unattended-upgrades.
nano /etc/apt/apt.conf.d/10periodic
</code></pre>

  <p>
    For instance, you can configure something like this:
  </p>
<pre class="line-numbers  language-bash"><code>APT::Periodic::Update-Package-Lists "1";
APT::Periodic::Download-Upgradeable-Packages "1";
APT::Periodic::AutocleanInterval "7";
APT::Periodic::Unattended-Upgrade "1";</code></pre>

    <h2 id="email-your-logs-to-yourself-optional">
      Email your logs to yourself (optional)
    </h2>

  <p class="msg msg--highlight">
    If you don't want to email your logs, skip this section.
  </p>

  <p>
    If you want to keep track of your logs and email them to you, then you can use <a href="https://linux.die.net/man/8/logwatch" target="_blank" class="" rel="nofollow noopener">Logwatch</a>.
  </p>

  <p>
    To install and configure logwatch, run these commands:
  </p>
<pre class="line-numbers  language-bash"><code>sudo apt-get install logwatch
nano /etc/cron.daily/00logwatch</code></pre>

  <p>
    Then, add this line:
  </p>
<pre class="line-numbers  language-html"><code>/usr/sbin/logwatch --output mail --mailto yourmail@gmail.com --detail high  </code></pre>

    <h2 id="installation-of-docker-and-dockercompose">
      Installation of Docker and Docker-Compose
    </h2>

  <p class="msg msg--info">
    The rest of the guide focuses on using docker and docker-compose to deploy services. If you want to deploy your services manually by configuring nginx and cert-manager, go ahead and try it yourself. If you want to do it using kubernetes, I will publish a guide as soon as possible.
  </p>

  <p>
    It's time to install docker and docker compose:
  </p>
<pre class="line-numbers  language-bash"><code>sudo apt update && sudo apt upgrade
sudo apt install apt-transport-https ca-certificates curl software-properties-common  
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"  
apt-cache policy docker-ce
sudo apt install docker-ce
sudo systemctl status docker
sudo curl -L "https://github.com/docker/compose/releases/download/1.26.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose  
sudo chmod +x /usr/local/bin/docker-compose
</code></pre>

  <p>
    Now,&nbsp;assuming that everything went well, we should have docker and docker-compose installed in our server.&nbsp; It's time to test docker-compose by deploying a small web in our local network.
  </p>
<pre class="line-numbers  language-bash"><code>mkdir app
nano app/index.html
</code></pre>

  <p>
    Insert this content into the <b>index.html</b> file:
  </p>
<pre class="line-numbers  language-html"><code>&lt;!doctype html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;Docker Compose Demo&lt;/title&gt;
    &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/kognise/water.css@latest/dist/dark.min.css"&gt;
&lt;/head&gt;
&lt;body&gt;

	&lt;h1&gt;This is a Docker Compose Demo Page.&lt;/h1&gt;
	&lt;p&gt;This content is being served by an Nginx container.&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre>

  <p>
    Save the file, and run the following command:
  </p>
<pre class="line-numbers  language-bash"><code>nano docker-compose.yml</code></pre>

  <p>
    Insert this content into the <b>docker-compose.yml</b> file:
  </p>
<pre class="line-numbers  language-yaml"><code>version: '3.7'
services:
  web:
    image: nginx:alpine
    ports:
      - "8000:80"
    volumes:
      - ./app:/usr/share/nginx/html</code></pre>

  <p>
    Now, to start our aplication&nbsp;containerized, we must run the following command:
  </p>
<pre class="line-numbers  language-bash"><code>docker-compose up -d
</code></pre>

  <p>
    That command should return an output like this one:
  </p>
<pre class="line-numbers  language-html"><code>Creating network "compose-demo_default" with the default driver
Pulling web (nginx:alpine)...
alpine: Pulling from library/nginx
cbdbe7a5bc2a: Pull complete
10c113fb0c77: Pull complete
9ba64393807b: Pull complete
c829a9c40ab2: Pull complete
61d685417b2f: Pull complete
Digest: sha256:57254039c6313fe8c53f1acbf15657ec9616a813397b74b063e32443427c5502
Status: Downloaded newer image for nginx:alpine
Creating compose-demo_web_1 ... done</code></pre>

  <p>
    Now, your webpage should be accesible through your browser by typing "local-IP-of-your-server:8000".
  </p>

  <p>
    Ok, now that we have a webpage deployed in our local network, I should share a few useful commands to manage Docker:
  </p>
<pre class="line-numbers  language-bash"><code># We can see the logs of our containers
docker-compose logs
# Pause our containers
docker-compose pause
# Unpause our containers
docker-compose unpause
# Stop our containers
docker-compose stop
# Delete all the resources and volumes assigned to our containers
docker-compose down
# List our images
docker images
# Delete our images
docker image rm nginx:alpine
# Or
docker rmi nginx:alpine
# We can delete all stoped container, every network not use by al least one container, every unused image and all build cache.
docker system prune -a
# Do the same but filtering specific images
docker system prune --filter nginx:alpine
# Or just the volumes
docker system prune --volumes
# Or we can do the same but without asking for confirmation
docker system prune -a -f  
</code></pre>

  <p>
    Now, if you want to deploy you web to the world outside your local network, you must change a few things in your router (supposing you have access to the router). It is completely necessary to set port-forwarding, because if you are mounting your server at home, your devices are connected inside your home using a private network. It is possible for us to connect to the internet thanks to <a href="https://en.wikipedia.org/wiki/Network_address_translation" rel="nofollow noopener">NAT</a>.&nbsp;
  </p>

  <p>
    Each router is a different world, so you must search information about how to port-forward in your home router.&nbsp;
  </p>

  <p>
    On the other hand, if you're using some provider for your server, such as a VM in Oracle Cloud, then it should be easier. Search for your specific provider how to port-forward and that's the end of the problem.
  </p>

    <h2 id="using-a-domain-name-and-ddns">
      Using a domain name and DDNS
    </h2>

  <p>
    Ok, if you want to access your webpage easily without having to memorize a bunch of numbers, you have to buy a domain name. I recommend&nbsp;<a href="https://www.namecheap.com/" target="_blank" class="" data-link-popup-id="1661636146747">https://www.namecheap.com/</a>. It provides cheap domain names and it is also a DNS provider, but you can pick whichever you want.
  </p>

  <p>
    If you want to point your domain name to your server, there is one problem if your server is in your home. Most ISPs (or all of them, to be honest) nowadays change your public IP from time to time. If you don't want to lose access to your webpage when that happens, we must use Dynamic DNS. It is necessary to set DDNS with your DNS provider and use a DDNS client in our server to comunicate with our DNS provider. The DDNS client will inform the DNS provider of your new IP.
  </p>

  <p>
    I use <a href="https://ddclient.net/" target="_blank" rel="nofollow noopener">ddclient</a> for that, because Namecheap has a <a href="https://www.namecheap.com/support/knowledgebase/article.aspx/583/11/how-do-i-configure-ddclient/" target="_blank" rel="nofollow noopener">guide</a> to use it with them.
  </p>

    <h2 id="using-https-certificates-from-lets-encrypt">
      Using HTTPS certificates from Let's Encrypt
    </h2>

  <p>
    Next step is to create HTTPS certificates for our webpage. The docker way of doing this is by configurating let's encrypt. We can do it using different methods, but the best for me is using one of the best&nbsp;Edge Router nowadays. I'm talking of <a href="https://doc.traefik.io/traefik/" target="_blank" rel="nofollow noopener"><u>Traefik</u></a>.
  </p>

  <p>
    I will save you tons of documentation, because this guide is already too long. If you want to set a reverse proxy with traefik which also can generate certificates with Let's Encrypt, just use this files:
  </p>

  <p>
    First, create an acme.json file and change its privilegies (take into account the path of the acme.json file, because you have to add that path to the <b>docker-compose.yaml</b> file:
  </p>
<pre class="line-numbers  language-bash"><code>touch acme.json
chmod 600 acme.json</code></pre>

  <p>
    Now, create a folder and two different files for traefik configuration (put your domain name where it says YOUR-DOMAIN-NAME and your preferred email where it says youremail@example.com):
  </p>
<pre class="line-numbers  language-bash"><code>mkdir ./config
nano ./config/traefik.yml</code></pre>
<pre class="line-numbers  language-yaml"><code># traefik.yml
api:
  dashboard: true # Enable the dashboard
entryPoints:
  web:
    address: ":80"
    http:
      redirections:
        entryPoint:
          to: web-secure
  web-secure:
    address: ":443"
    http:
      tls:
        certResolver: default
providers:
        # In order to get this working on docker, refer to https://doc.traefik.io/traefik/providers/docker/ for more info.
  docker:
    endpoint: "unix:///var/run/docker.sock"
    exposedByDefault: false # As seen in the documentation, "Expose containers by default through Traefik. If set to false, containers that do not have a traefik.enable=true label are ignored from the resulting routing configuration".
  file:
    filename: /etc/traefik/config.yml # In order to get all my configuration info in a separate file (dinamic.yaml), I use https://doc.traefik.io/traefik/providers/file/.
    watch: true # Watch for changes
    
certificatesResolvers: # Refer to https://doc.traefik.io/traefik/https/acme/#certificate-resolvers to more info. 
  default:
    acme:
      email: youremail@example.com 
      storage: /etc/traefik/acme/acme.json # Previously you have to create the file, change the permissions using chmod and then use a docker volume.
      keyType: 'EC384' # 
      tlsChallenge: true # https://doc.traefik.io/traefik/https/acme/#tlschallenge
</code></pre>

  <p>
    Now, we have to configure one last yaml file&nbsp;(put your domain name where it says YOUR-DOMAIN-NAME):
  </p>
<pre class="line-numbers  language-bash"><code>nano ./config/config.yml</code></pre>
<pre class="line-numbers  language-yaml"><code># config.yml
http:
  routers:
    traefik:
      rule: Host(`subdomainForTheDashboard.YOUR-DOMAIN-NAME`)
      entryPoints: 
        - "web-secure"
      service: api@internal
      middlewares:
        - secHeader
      tls:
        certResolver: default
  middlewares:
          # In order to modify the request, I use middlewares. In this case to force https.
    secHeader:
        # HSTS / Secure Headers, Useful to have a more secure experience with HTTPS
      headers:
        accessControlMaxAge: 
          - 100
        hostsProxyHeaders:
          - "X-Forwarded-Host"
        forceSTSHeader: true
        frameDeny: true
        sslRedirect: true
        browserXssFilter: true      
        contentTypeNosniff: true
        customFrameOptionsValue: "allow-from https:YOUR-DOMAIN-NAME"
        referrerPolicy: "same-origin"
        stsIncludeSubdomains: true
        stsPreload: true
        stsSeconds: 31536000
        featurePolicy: "camera 'none'; geolocation 'none'; microphone 'none'; payment 'none'; usb 'none'; vr 'none';"
        customResponseHeaders:
          X-Robots-Tag: "none,noarchive,nosnippet,notranslate,noimageindex,"
          server: "YOUR-DOMAIN-NAME"
tls:
        # Now, I refer to https://doc.traefik.io/traefik/https/tls/ for information. 
        # Options allow me to to configure some parameters of the TLS connection.
  options:
    default:
            # Now, here a use the min Version tls version 1.2 just as shown in the traefik documentation (This config will get an A+ grade in https://www.ssllabs.com/ssltest/) 
      minVersion: VersionTLS12 # Refering to the Traefik Documentation, I use sniStrict because "Traefik won't allow connections from clients that do not specify a server_name extension or don't match any certificate configured on the tlsOption".
      sniStrict: true
      cipherSuites:
        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
        - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384   # TLS 1.2
        - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305    # TLS 1.2
        - TLS_AES_256_GCM_SHA384                  # TLS 1.3
        - TLS_CHACHA20_POLY1305_SHA256            # TLS 1.3
        # Now I define the eliptic curves preferences for ECC cryptography
        # Refer to https://pkg.go.dev/crypto/tls#CurveID for more info
      curvePreferences:
        - CurveP521
        - CurveP384
    mintls13:
      minVersion: VersionTLS13
      sniStrict: true
</code></pre>

  <p>
    Ok, this configuration should work flawlessly. You can add more middlewares, such as rate limit or plugins like fail2ban. I'm not covering that here right now.
  </p>

  <p>
    Lastly, a <b>docker-compose.yaml</b>(put your domain name where it says YOUR-DOMAIN-NAME and put the path to your acme.json file and your webpage folder):
  </p>
<pre class="line-numbers  language-bash"><code>nano docker-compose.yaml</code></pre>
<pre class="line-numbers  language-yaml"><code>version: '3.7'
services:
  traefik:
    image: traefik:2.5.5
    container_name: traefik
    network_mode: host
    restart: unless-stopped
    volumes:
      - ./config/:/etc/traefik/
      - /path/to/acme.json:/etc/traefik/acme/acme.json
      - /var/run/docker.sock:/var/run/docker.sock
  web:
    image: nginx:1.21.4-alpine
    container_name: web
    restart: always
    expose:
      - "80"
    volumes:
      - /path/to/your/webpage/folder:/usr/share/nginx/html:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.webpage.entryPoints=web-secure
      - traefik.http.routers.webpage.rule=Host(`YOUR-DOMAIN-NAME`)
      - "traefik.http.routers.webpage.middlewares=secHeader@file"
</code></pre>

  <p>
    If you want to deploy more services, just add this to every new service in a docker-compose file:
  </p>
<pre class="line-numbers  language-yaml"><code> labels:
      - traefik.enable=true
      - traefik.http.routers.NAME-ROUTER.entryPoints=web-secure
      - traefik.http.routers.NAME-ROUTER.rule=Host(`YOUR-DOMAIN-NAME`)
      - "traefik.http.routers.NAME-ROUTER.middlewares=secHeader@file"</code></pre>

  <p>
    Just remember to change NAME-ROUTER to another name each time (it is the name of the <a href="https://doc.traefik.io/traefik/routing/routers/" rel="nofollow noopener" class="" target="_blank">traefik router</a>) and YOUR-DOMAIN-NAME should be a subdomain, such as <b>nextcloud.example.com</b>&nbsp;for a hipothetical nextcloud service.
  </p>

  <p>
    To deploy this configuration, go to the folder where the <b>docker-compose.yaml</b> file is, and run the following command:
  </p>
<pre class="line-numbers  language-bash"><code>sudo docker-compose up -d</code></pre>

  <p>
    If you go to your domain, assuming that you previouly pointed the domain to your server IP (or the public IP of your router, in case of a home server), the webpage should be displayed in the browser as intended.
  </p>

  <p>
    That's it, you have started in the selfhosting hobby. I recommend you this <a href="https://www.reddit.com/r/selfhosted/" rel="nofollow noopener">subreddit</a>.
  </p>

  <p>
    Good luck, lads.
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How to get notifications each time someone enters your server</title>
        <author>
            <name>Jonathan Ródenas López</name>
        </author>
        <link href="https://baronhez.github.io/how-to-get-notifications-each-time-someone-enters-your-server/"/>
        <id>https://baronhez.github.io/how-to-get-notifications-each-time-someone-enters-your-server/</id>
            <category term="Self-hosted"/>

        <updated>2022-08-31T01:26:37+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://baronhez.github.io/media/posts/12/51-Messages-2.jpg" alt="" />
                    Get a&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://baronhez.github.io/media/posts/12/51-Messages-2.jpg" alt="" />
                
    <h1 id="get-a-notification-on-telegram-or-slack" class="align-center">
      Get a notification on Telegram or Slack
    </h1>

    <h2 id="telegram-notificationnbsp">
      Telegram notification&nbsp;
    </h2>

  <p>
    Firstly, create a telegram bot. To create one, you need to contact the BotFather, which is essentially a bot used to create other bots.
<br>
<br>The command you need is /newbot which leads to the following steps to create your bot:
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/12/telegr.png" sizes="100vw" srcset="https://baronhez.github.io/media/posts/12/responsive/telegr-xs.png 300w ,https://baronhez.github.io/media/posts/12/responsive/telegr-sm.png 480w ,https://baronhez.github.io/media/posts/12/responsive/telegr-md.png 768w ,https://baronhez.github.io/media/posts/12/responsive/telegr-lg.png 1024w ,https://baronhez.github.io/media/posts/12/responsive/telegr-xl.png 1360w ,https://baronhez.github.io/media/posts/12/responsive/telegr-2xl.png 1600w"  height="858" width="860" alt="" />
      <figcaption>Setting a bot is as simple as this.</figcaption>
    </figure>

  <p>
    The next step is to setup a group where you want your alerts to go and add yourself, the bot you just created and <a href="https://t.me/myidbot" target="_blank" class="" rel="nofollow noopener">IDbot</a>.
  </p>

  <p>
    IDBot will give you the CHATID. You can do this by sending "<i>/getgroupid"&nbsp;</i>into the group. It'll return the group ID for the channel, simply prepend a hyphen to the number and that's the chatID: <i>-123456789</i> as an example. Grab this, plus the HTTP API  key of your own bot, and add them to the following script:
  </p>
<pre class="line-numbers  language-bash"><code># Login Notifications
CHATID=CHANGEME
BOTKEY=CHANGEME

# get hostname
HOSTNM=$( hostname )

# get external IP address
IP=$( curl -s http://whatismyip.akamai.com/ )

# find IP address of person last logged in
LOGININFO=$( last -1 -i | head -n 1)

# parse into nice format
LOGININFO1=$( python3 -c "login='$LOGININFO'.split('   '); del login[1]; del login[1]; print(''.join([x.strip(' ') + '   \n' for x in login]));" )

# send information to telegram notification bot
curl -X POST -H 'Content-Type: application/json' -d "{\"chat_id\": \"$CHATID\", \"text\": \"Log in to: $HOSTNM\n$IP\nfrom: $LOGININFO1\", \"disable_notification\": false}" https://api.telegram.org/bot$BOTKEY/sendMessage --silent &gt; /dev/null</code></pre>

  <p>
    This can then either be bundled into a bash script and called from your profile or written straight into the profile:
  </p>

  <ul>
    <li>If your shell is ZSH:&nbsp;</li>
  </ul>
<pre class="line-numbers  language-bash"><code>nano /etc/zsh/zprofile</code></pre>

  <ul>
    <li>If your shell is Bash:</li>
  </ul>
<pre class="line-numbers  language-bash"><code>  nano /etc/profile</code></pre>

    <h2 id="slack-notification">
      Slack notification
    </h2>

  <p>
    You will need a Slack webhook. <a href="https://api.slack.com/messaging/webhooks" target="_blank" class="" rel="nofollow noopener">Here</a> is the documentation about creating one.
  </p>

  <p>
    After getting a webhook, you should have a URL like this one:
  </p>
<div> https://hooks.slack.com/services/VALUE1/VALUE2</div>

  <p>
    To get a Slack notification I will use a python script.&nbsp;For this reason, you need to: install python, install the Slack SDK and write the script.
  </p>
<pre class="line-numbers  language-bash"><code>sudo apt update
sudo apt install python3
pip install slack_sdk    
nano notification.py</code></pre>

  <p>
    The content of <b>notification.py</b> must be the following:
  </p>
<pre class="line-numbers  language-python"><code>from slack_sdk.webhook import WebhookClient
import os

url = " https://hooks.slack.com/services/VALUE1/VALUE2"
webhook = WebhookClient(url)
HOSTNM = os.popen('hostname').read()
IP = os.popen('curl -s http://whatismyip.akamai.com/').read()
LOGININFO=os.popen('last -1 -i | head -n 1 | cut -d " " -f 1').read()

response = webhook.send(text='Log in to: {}\n from {}\n by\n User: {} \n'.format(HOSTNM,IP,LOGININFO))
assert response.status_code == 200
assert response.body == "ok"</code></pre>

  <p>
    Save the changes, then run the script just for testing purposes:
  </p>
<pre class="line-numbers  language-bash"><code>python3 /path/to/the/file/notification.py</code></pre>

  <p>
    Then, after checking that the script runs flawlessly, add the command at the end of your profile, the same way you would add the telegram bash script to your profile, depending of the shell you're using.
  </p>

  <p>
    And that's it, now you should be receiving notifications on Telegram or Slack everytime someone enters your server.
  </p>

    <h3 id="credits">
      Credits
    </h3>

  <p>
    Credits to <a href="https://blog.zsec.uk/" target="_blank" rel="nofollow noopener">ZeroSec</a> for this info.
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How to install and configure SSH to be secure</title>
        <author>
            <name>Jonathan Ródenas López</name>
        </author>
        <link href="https://baronhez.github.io/how-to-configure-ssh-to-be-secure/"/>
        <id>https://baronhez.github.io/how-to-configure-ssh-to-be-secure/</id>
            <category term="SSH"/>

        <updated>2022-08-31T01:26:31+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://baronhez.github.io/media/posts/10/ssh-transformed11.jpeg" alt="Eh" />
                    It should&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://baronhez.github.io/media/posts/10/ssh-transformed11.jpeg" alt="Eh" />
                
    <h2 id="it-should-be-ready-in-just-two-minutes-as-simple-as-that">
      It should be ready in just two minutes, as simple as that.
    </h2>

  <p>
    I will show you how to configure SSH and make it more secure within a couple of minutes.
  </p>

    <h3 id="connect-to-your-server-using-keys">
      Connect to your server using keys
    </h3>

  <p>
    First, connect to your server using SSH. Oh, don't you have SSH in your server yet? Ok, then, run these commands in your server:
  </p>
<pre class="line-numbers  language-bash"><code>sudo apt-get install openssh-server
sudo systemctl enable ssh
sudo systemctl start ssh</code></pre>

  <p>
    Apt-get doesn't work? Ok, you're not using a debian based distro in your server, so you have to search how to install packages in your distro (it is a 1 minuto google search, I promise).
  </p>

  <p>
    Ok, now that SSH is working in our server, connect to the server from another computer, just for testing. If it is working, now run this command in your server (is going to create the directory for the keys and change the permissions of that directory):
  </p>
<pre class="line-numbers  language-bash"><code>mkdir ~/.ssh && chmod 700 ~/.ssh</code></pre>

  <p>
    Now, we have to generate the keys in our computer.
  </p>
<pre class="line-numbers  language-bash"><code># For Windows:
ssh-keygen -b 4096
# The keys are stored in "%userprofile%\.ssh" as id_rsa and id_rsa.pub by default.
#Now, transfer the public key to the server.
scp $env:USERPROFILE/.ssh/id_rsa.pub Username@123.445.566.233:~/.ssh/authorized_keys    
# Replace the Username and IP with your own Username and Server IP.
# For Linux:
ssh-keygen -b 4096
# The keys are stored in "~/.ssh" as id_rsa and id_rsa.pub by default.
# Now, transfer the public key to the server.
ssh-copy-id Username@123.445.566.233
# Replace the Username and IP with your own Username and Server IP.
# For Mac:
ssh-keygen -b 4096
# The keys are stored in "~/.ssh" as id_rsa and id_rsa.pub by default.
# Now, transfer the public key to the server.
scp ~/.ssh/id_rsa.pub Username@123.445.566.233:~/.ssh/authorized_keys    
# Replace the Username and IP with your own Username and Server IP.
</code></pre>

  <p>
    Ok, if you connect now to your server through SSH, you will connect directly, without having to input a password. Now, let's continue with the next step.
  </p>

    <h3 id="disable-password-login">
      Disable password login
    </h3>

  <p>
    Edit the file&nbsp;<i>/etc/ssh/sshd_config </i>using some editor like Nano or Vim. First, search for the <b>KbdInteractiveAuthentication</b> line and change the value to no. This way is not possible to use a keyboard during&nbsp;authentication. Next thing we have to change is&nbsp; <b>PasswordAuthentication</b>. Again, the default value is yes, but we’ll be setting it to no.
  </p>

  <p class="msg msg--info">
    Some people may say something like "Change the ssh port to another one", but a real hacker (most likely a bot) will scan your ports searching for it, so this act is stupid and annoying without any good reason.
  </p>

  <p class="msg msg--info">
    You can also disable root login, but since your user will surely have sudo privileges... well, I leave up to you to decide if it is worth it (I have my root login disable).
  </p>

    <h3 id="remove-weak-prime-numbers">
      Remove weak prime numbers
    </h3>

  <p>
    The client and the server use these moduli to negotiate a secure key. Remove the small ones by runnings these commands:
  </p>
<pre class="line-numbers  language-bash"><code>cp /etc/ssh/moduli ~/copy_moduli 
awk '$5 &gt;= 3071' /etc/ssh/moduli &gt; /etc/ssh/moduli.safe
mv /etc/ssh/moduli.safe /etc/ssh/moduli    </code></pre>

  <p>
    The first command makes a security copy before changing the moduli in the home folder of your user. The second command looks for lines in /etc/ssh/moduli, which on the fifth line have a value bigger than 3071 and writes those in the moduli.safe file. Then, the third command replace the moduli using the moduli.safe file.
  </p>

    <h3 id="allow-strong-cyphers-only">
      Allow strong cyphers only
    </h3>

  <p>
    We are going to allow only the most secure cyphers. Create a new file <i>/etc/ssh/sshd_config.d/ssh_hardening.conf</i>. Then, add this content exactly as it is displayed:
  </p>
<pre class="line-numbers  language-bash"><code>KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com
HostKeyAlgorithms ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,sk-ssh-ed25519-cert-v01@openssh.com,rsa-sha2-256,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com  </code></pre>

    <h2 id="bonus">
      Bonus
    </h2>

  <p>
    With all I mention above should be more than enough, the following tips are optional... and will take you more than just a couple of minutes.
  </p>

    <h3 id="usenbspmulti-factor-authentication">
      Use&nbsp;Multi Factor Authentication
    </h3>

  <p>
    First, update your system:
  </p>
<pre class="line-numbers  language-bash"><code>sudo apt update
sudo apt upgrade -y</code></pre>

  <p>
    Now, install the&nbsp;<i>libpam-google-authenticator</i> package.
  </p>
<pre class="line-numbers  language-bash"><code>sudo apt install libpam-google-authenticator
</code></pre>

  <p>
    For MFA, if I'm not mistaken, you will have to enable again the <b>KbdInteractiveAuthentication</b> line in&nbsp;<i>/etc/ssh/sshd_config.</i>
  </p>

  <p>
    Once the PAM app is installed you will need to use a helper app that comes with the PAM to generate a Time-Based One-Time Password (TOTP) key for the user you want to add a second factor to. This key is generated on a per user basis, and as a result is not system-wide.&nbsp;To do this simply run:
  </p>
<pre class="line-numbers  language-bash"><code>google-authenticator</code></pre>

  <p>
    Upon running the command, you’ll be asked a few questions. The first one asks if authentication tokens should be time-based. We want to select <b>y</b>:
  </p>
<pre class="line-numbers  language-bash"><code>Do you want authentication tokens to be time-based (y/n): y</code></pre>

  <p>
    Once we select yes, the app will generate a QR code that can be scanned within your authenticator app of choice.
  </p>

  <p>
    This PAM allows for time-based or sequential-based tokens. Using sequential-based tokens mean the code starts at a certain point and then increments the code after every use. Using time-based tokens mean the code changes randomly after a certain time elapses (usually 60s). We’ll stick with time-based because that is what apps like Google Authenticator anticipate.
  </p>

  <p>
    The remaining questions inform the PAM how to function. We’ll go through them one by one.
  </p>
<pre class="line-numbers  language-bash"><code>Do you want me to update your "/home/zephr/.google_authenticator" file? (y/n)  </code></pre>

  <p>
    This writes the key and options to the <b>~/.google_authenticator</b> file. If you select no, then the program will quit and nothing is saved which in turn results in the authenticator application not working. Therefore we want to select <b>yes </b>for this!&nbsp;
  </p>
<pre class="line-numbers  language-html"><code>By default, tokens are good for 30 seconds and in order to compensate for
possible time-skew between the client and the server, we allow an extra
token before and after the current time. If you experience problems with poor
time synchronization, you can increase the window from its default
size of 1:30min to about 4min. Do you want to do so (y/n) n</code></pre>

  <p>
    Selecting yes for this question enables up to 8 valid codes in a moving four minute window. By answering no, you limit it to 3 valid codes in a 90 second rolling window.
  </p>

  <p>
    Unless you find issues with the 90 second window, answering no is the more secure choice.
  </p>
<pre class="line-numbers  language-html"><code>If the computer that you are logging into isn't hardened against brute-force
login attempts, you can enable rate-limiting for the authentication module.
By default, this limits attackers to no more than 3 login attempts every 30s.
Do you want to enable rate-limiting (y/n) y</code></pre>

  <p>
    Rate limiting means a remote attacker can only attempt a certain number of guesses before being blocked. I recommend you to answer <b>yes</b>.
  </p>

  <p>
    Once you finish this setup, if you want to back up your secret key, you can copy the <b>~/.google-authenticator</b> file to a trusted location.&nbsp;
  </p>

  <p>
    Once we've been through the steps to configure google authenticator, the next step is to setup our SSH config to allow authenticator to function:
  </p>
<pre class="line-numbers  language-bash"><code>sudo nano /etc/pam.d/sshd</code></pre>

  <p>
    Add the following line to the bottom of the file:
  </p>
<pre class="line-numbers  language-bash"><code># Standard Un*x password updating.
@include common-password
auth required pam_google_authenticator.so nullok  </code></pre>

  <p>
    The <b>nullok</b> word at the end of the last line tells the PAM that this authentication method is optional. This allows users without a OATH-TOTP token to still log in using their SSH key. If you remove <b>nullok</b>&nbsp;from the line, this MFA would be mandatory.
  </p>

  <p>
    Next, we’ll configure SSH to support this kind of authentication. Open the SSH configuration file for editing.
  </p>
<pre class="line-numbers  language-bash"><code>sudo nano /etc/ssh/sshd_config</code></pre>

  <p>
    &nbsp;We are going to make SSH aware of MFA by adding AuthenticationMethods and UsePAM:
  </p>
<pre class="line-numbers  language-bash"><code># To disable tunneled clear text passwords, change to no here!
PasswordAuthentication no
#PermitEmptyPasswords no

# Change to yes to enable challenge-response passwords (beware issues with
# some PAM modules and threads)


#ChallengeResponseAuthentication yes
KbdInteractiveAuthentication yes
UsePAM yes
AuthenticationMethods publickey,password publickey,keyboard-interactive</code></pre>

  <p>
    Save the config and restart the SSH service.
  </p>
<pre class="line-numbers  language-bash"><code>sudo systemctl reload sshd.service</code></pre>

  <p>
    Now, you have MFA for your SSH.
  </p>

    <h3 id="enable-firewall-and-make-use-ofnbspratelimiting">
      Enable Firewall and make use of&nbsp;Rate-Limiting
    </h3>

  <p>
    First, install Uncomplicated Firewall(UFW).
  </p>
<pre class="line-numbers  language-bash"><code>sudo apt install ufw
</code></pre>

  <p>
    Now, set a rate limit:
  </p>
<pre class="line-numbers  language-bash"><code>## ufw limit ssh various usage ##
ufw limit ssh comment 'Rate limit for openssh server'</code></pre>

  <p>
    When a limit rule is used, ufw will normally allow the connection but will deny connections if an IP address attempts to initiate six or more connections within thirty seconds.
  </p>

  <p>
    You can also allow or disallow connections from specific IPs:
  </p>
<pre class="line-numbers  language-bash"><code>   sudo ufw allow from 1.2.3.4 to any port 22</code></pre>

  <p>
    The above example only allows connections from 1.2.3.4 to port 22.
  </p>

    <h3 id="set-up-fail2ban">
      Set up Fail2Ban
    </h3>

  <p>
    We can go a little further by setting up Fail2Ban.&nbsp;Fail2Ban essentially actively looks out for signs of potential password authentication abuses to filter out IP addresses and regularly update the system firewall to suspend these IP addresses for a certain period.
  </p>

  <p>
    To install and setup Fail2Ban, run the following commands:
  </p>
<pre class="line-numbers  language-bash"><code>sudo apt install fail2ban
sudo cp /etc/fail2ban/jail.{conf,local}
sudo nano /etc/fail2ban/jail.local</code></pre>

  <p>
    To configure Fail2Ban, modify the following lines:
  </p>
<pre class="line-numbers  language-bash"><code>bantime = 1d</code></pre>

  <p>
    If you assign a negative value, the ban will be permanent.
  </p>
<pre class="line-numbers  language-bash"><code>findtime = 10m</code></pre>

  <p>
    <b>findtime</b>&nbsp;defines&nbsp;the time-duration allowed between consecutive login attempts. If the multiple login attempts were made within the time defined by findtime, a ban would be set on the IP.
  </p>
<pre class="line-numbers  language-bash"><code>maxretry = 5</code></pre>

  <p>
    <b>maxretry</b>&nbsp;defines&nbsp; the exact number of failed login attempts allowed within the findtime. If the number of failed-authorization attempts within the findtime exceeds the maxretry value, the IP would be banned from logging back in.
  </p>

  <p>
    Fail2ban also allows you to grant immunity to IP addresses and IP ranges of your choice.
  </p>
<pre class="line-numbers  language-bash"><code>ignoreip = 127.0.0.1/8 ::1 222.222.222.222 192.168.55.0/24</code></pre>

  <p>
    Upon setting all the options you want, simply start the service then check the status:
  </p>
<pre class="line-numbers  language-bash"><code>sudo systemctl start fail2ban
sudo systemctl status fail2ban</code></pre>

    <h2 id="credits">
      Credits
    </h2>

  <p>
    I found all this tweaks and tricks in random sources from internet, but to sum it all, all of them can be found in two webpages, so the credit goes to the authors of <a href="https://disknotifier.com/blog/simple-ssh-security/" target="_blank" class="">https://disknotifier.com/blog/simple-ssh-security/</a> and <a href="https://blog.zsec.uk/locking-down-ssh-the-right-way/" target="_blank">https://blog.zsec.uk/locking-down-ssh-the-right-way</a>/.
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Markdown Beginner Guide</title>
        <author>
            <name>Jonathan Ródenas López</name>
        </author>
        <link href="https://baronhez.github.io/markdown-beginner-guide/"/>
        <id>https://baronhez.github.io/markdown-beginner-guide/</id>
            <category term="Markdown"/>

        <updated>2022-08-31T01:25:58+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://baronhez.github.io/media/posts/8/markdown-2.jpg" alt="" />
                    I am&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://baronhez.github.io/media/posts/8/markdown-2.jpg" alt="" />
                
    <h2 id="i-am-not-an-expert-but-this-is-more-than-enough-for-me">
      I am not an expert, but this is more than enough for me
    </h2>

  <p>
    Markdown is more complex than you think, is not only about headings and tables, you can also make complex graphs and even network representations (I'm not joking with this). Today I will share with you, fellow developer, my own beginner guide for Markdown.
  </p>
<pre class="line-numbers  language-html"><code># Heading H1

## Heading H2

### Heading H3

#### Heading H4 

##### Heading H5

###### Heading H6

This is normal text

**This is bold text**

_This is italic text_

*This is also italic text*

- This
- is
- an 
- unordened
- list    

1. This
2. is
3. a
4. list
1. Ordered 
   1. If you use
   2. Tab
      1. It is possible
      2. to use
      3. subsections
         1. really cool
         
[This text has a link to www.google.com](www.google.com)

[This text displays an image if you click on it](./path/to/image/example.jpg)

![This alternative text displays an image if you click on it](./path/to/image/example.jpg)

&gt;"This text is a quote"
&gt;
&gt;-Jonathan  

~~Text through~~

Table:

| Name | Content | Price |
|------|---------|-------|
| Name | Content | Price |
| Name | Content | Price |
|------|---------|-------|
|------|---------|-------|
|------|---------|-------|
| Name | Content | Price |
| Name | Content | Price |
| Name | Content | Price |
| Name | Content | Price |
| Name | Content | Price |
|------|---------|-------|
|------|---------|-------|

To put some code, use inline code, like `print("Hello, you beaty thing")`

But the best practices is to use code snippets, indicating the lenguage:

````java
int b = a + c;
systemprintoutln(b);  
````
</code></pre>

  <p>
    Let's end this with some tricky stuff.
  </p>

  <p>
    Take a look into <a href="https://mermaid-js.github.io/mermaid/#/" target="_blank">Mermaid</a>. It allows us to make diagrams and visualizations.
  </p>
<pre class="line-numbers  language-html"><code>```mermaid
graph LR
    subgraph Name 1
    A(internet) --&gt; B[your server]
    end
    subgraph Name 2
    B --&gt; D[whoami1]
    E[ubuntu test] --&gt; D
    end
    subgraph Name 3
    B --&gt; G[whoami 2]
    end
    E-..-&gt; G
```  
</code></pre>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/8/markdown.PNG" sizes="100vw" srcset="https://baronhez.github.io/media/posts/8/responsive/markdown-xs.PNG 300w ,https://baronhez.github.io/media/posts/8/responsive/markdown-sm.PNG 480w ,https://baronhez.github.io/media/posts/8/responsive/markdown-md.PNG 768w ,https://baronhez.github.io/media/posts/8/responsive/markdown-lg.PNG 1024w ,https://baronhez.github.io/media/posts/8/responsive/markdown-xl.PNG 1360w ,https://baronhez.github.io/media/posts/8/responsive/markdown-2xl.PNG 1600w"  height="392" width="871" alt="" />
      <figcaption>This is the final graph. Compare the code snippet with the graph to know how to create this diagram.</figcaption>
    </figure>

  <p>
    I recommend you to check mermaid and make more complex diagrams if you work with networks in a daily basis, because it is truly useful for this purpose.&nbsp;
  </p>

  <p>
    Thanks for reading my quick guide of Markdown. It is short, but the best things in life are short, and I hate to spend 20 minutes reading the filling of some random article from a guide in the internet about how markdown help some developer to cope with the dead of his lost cousin. Guides should get straight to the point :)
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How to install and activate Windows 10 and Windows 11 for free</title>
        <author>
            <name>Jonathan Ródenas López</name>
        </author>
        <link href="https://baronhez.github.io/how-to-install-and-activate-windows-10-and-windows-11-completely-for-free-the-easiest-way/"/>
        <id>https://baronhez.github.io/how-to-install-and-activate-windows-10-and-windows-11-completely-for-free-the-easiest-way/</id>
            <category term="Windows"/>

        <updated>2022-08-31T05:47:11+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://baronhez.github.io/media/posts/5/wallhaven-x8ye3z.jpg" alt="" />
                    
    <figure class="post__image post__image--wide">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/5/windows-AigsWJmvoEo-unsplash-2-2xl-2.jpg" sizes="100vw" srcset="https://baronhez.github.io/media/posts/5/responsive/windows-AigsWJmvoEo-unsplash-2-2xl-2-xs.jpg 300w ,https://baronhez.github.io/media/posts/5/responsive/windows-AigsWJmvoEo-unsplash-2-2xl-2-sm.jpg 480w ,https://baronhez.github.io/media/posts/5/responsive/windows-AigsWJmvoEo-unsplash-2-2xl-2-md.jpg 768w ,https://baronhez.github.io/media/posts/5/responsive/windows-AigsWJmvoEo-unsplash-2-2xl-2-lg.jpg 1024w ,https://baronhez.github.io/media/posts/5/responsive/windows-AigsWJmvoEo-unsplash-2-2xl-2-xl.jpg 1360w ,https://baronhez.github.io/media/posts/5/responsive/windows-AigsWJmvoEo-unsplash-2-2xl-2-2xl.jpg 1600w"  height="1067" width="1600" alt="" />
      
    </figure>

    <h2 id="trust-me-it-is-completely-easy-following-this-guide">
      Trust me, it is completely easy following this guide.
    </h2>

  <p>
    Hello! If you want to configure a computer to have Windows 10 activated for free (all of this works also for Windows 11 because Microsoft devs repeated the licensing system and like 90% of the internal functionality) then you will have to follow some simple steps.
  </p>

  <p>
    <b>Step 1:</b> You must get an ISO of w10 or w11 from anywhere.
<br>You can get it from <a href="https://www.microsoft.com/en-us/software-download" target="_blank" class="" rel="nofollow noopener">official sites</a> or from <a href="https://linuxct.space/Windows/" target="_blank" class="" rel="nofollow noopener">mirrors</a>:
  </p>

  <p>
    
  </p>

  <p>
    
  </p>

  <p>
    <b>W11 ISO
</b><br><u>Microsoft official:
</u><br><a href="https://www.microsoft.com/en-us/software-download/windows11" class="" target="_blank" rel="nofollow noopener">https://www.microsoft.com/en-us/software-download/windows11
<br></a><u>Mirror:
</u><br><a href="https://linuxct.space/Windows/" class="" target="_blank" rel="nofollow noopener">https://linuxct.space/Windows/</a>
  </p>

  <p>
    <b>W10 ISO:
</b><br><u>Microsoft official</u>:
<br><a href="https://www.microsoft.com/en-us/software-download/windows10" class="" target="_blank">https://www.microsoft.com/en-us/software-download/windows10
<br></a><u>Pirated Windows</u>, in case you want to choose a specific version:
<br><a href="https://tb.rg-adguard.net/public.php" target="_blank" class="" rel="nofollow noopener">https://tb.rg-adguard.net/public.php</a>
  </p>

  <p class="msg msg--highlight">
    <em><b>Attention:</b></em>
<br>As such, if you feel like it, you can download an ISO previously debloated by others and then you can go straight to the heart of the matter.<br><a href="https://ameliorated.info/documentation.html" target="_blank" class="" rel="nofollow noopener">https://ameliorated.info/documentation.html</a>
  </p>

  <p>
    Ok, and now?
  </p>

  <p>
    <font color="#f2f2f5"><b>Step 2:&nbsp;</b></font>Flash the ISO on a pendrive with at least 8 gigabytes of space (it's a lot, I know, but it's a big ISO).
<br>You have several options to do it, but if you already have another PC running Windows, I recommend you Rufus:
  </p>

  <p>
    Here is a quick tutorial:
  </p>

  <p>
    <a href="https://www.youtube.com/watch?v=Wt0Q-DBejIw" target="_blank" class="" data-link-popup-id="1661386907157">https://www.youtube.com/watch?v=Wt0Q-DBejIw</a>
  </p>

  <p>
    Here you can download the program:
  </p>

  <p>
    <a href="https://github.com/pbatard/rufus/releases/download/v3.17/rufus-3.17.exe" target="_blank" class="" rel="nofollow noopener">https://github.com/pbatard/rufus/releases/download/v3.17/rufus-3.17.exe</a>
  </p>

  <p>
    If you have a Linux PC, I recommend you Ventoy:
  </p>

  <p>
    <a href="https://linuxkamarada.com/en/2020/07/29/ventoy-create-a-multiboot-usb-drive-by-simply-copying-iso-images-to-it/" target="_blank" class="" rel="nofollow noopener">https://linuxkamarada.com/en/2020/07/29/ventoy-create-a-multiboot-usb-drive-by-simply-copying-iso-images-to-it/</a>
  </p>

  <p>
    Or&nbsp;SUSE imagewriter:&nbsp;<a href="https://software.opensuse.org/package/imagewriter" target="_blank" class="" rel="nofollow noopener">https://software.opensuse.org/package/imagewriter</a>
  </p>

  <p>
    <b>Step 3:</b> Insert the flashed usb into the machine where you want to install windows and once the installation environment starts, we can freely hit next until we&nbsp;get to the part that asks for an activation code.
<br>We have two options:
<br>We put one of these:
<br><a href="https://gist.github.com/Azhe403/d261f2aadccfc2fb20e00414342a3093" target="_blank" class="" rel="nofollow noopener">https://gist.github.com/Azhe403/d261f2aadccfc2fb20e00414342a3093
<br></a>Or we click the "I do not have an activation code" to continue with the installation.
  </p>

  <p>
    Well, assuming you haven't put in one of the activation codes I've put above, let's do a little trick to activate Windows.
  </p>

  <p>
    <b>Step 4:</b>&nbsp;You should be, by the end of the installation, in front of a empty windows desktop. Now we have to activate windows.
  </p>

  <p class="msg msg--highlight">
    If you want documentation for this step, go to <a href="https://massgrave.dev/" target="_blank" class="" rel="nofollow noopener">https://massgrave.dev/</a>
  </p>

  <p>
    Let's enter this webpage:<br><a href="https://github.com/massgravel/Microsoft-Activation-Scripts/releases" target="_blank" class="" rel="nofollow noopener">https://github.com/massgravel/Microsoft-Activation-Scripts/releases</a>
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/5/1-2.PNG" sizes="100vw" srcset="https://baronhez.github.io/media/posts/5/responsive/1-2-xs.PNG 300w ,https://baronhez.github.io/media/posts/5/responsive/1-2-sm.PNG 480w ,https://baronhez.github.io/media/posts/5/responsive/1-2-md.PNG 768w ,https://baronhez.github.io/media/posts/5/responsive/1-2-lg.PNG 1024w ,https://baronhez.github.io/media/posts/5/responsive/1-2-xl.PNG 1360w ,https://baronhez.github.io/media/posts/5/responsive/1-2-2xl.PNG 1600w"  height="196" width="895" alt="Pick the latest release of the program, in my case was the 1.6 version." />
      <figcaption>Pick the latest release of the program, in my case was the 1.6 version. Download the .7z file.</figcaption>
    </figure>

  <p>
    Now, we have to unzip this file. But we do not have any zip program yet. Let's jump there to another webpage in order to download useful programs. This webpage is <a href="https://ninite.com/" target="_blank" class="" rel="nofollow noopener">Ninite</a>. This webpage allows us to install multiple program just by executing one single exe file. Once you have marked the programs that you want to install, click the button "Get your ninite". Then, run the exe file you just downloaded.
  </p>

  <p>
    Ok, now that you have installed 7zip (I recommend that one, it's the best for me), unzip the file we previously downloaded. For me was <i>MAS_1.6_Password_1234.7z. </i>The password is 1234 (obviously).
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/5/1-3.PNG" sizes="100vw" srcset="https://baronhez.github.io/media/posts/5/responsive/1-3-xs.PNG 300w ,https://baronhez.github.io/media/posts/5/responsive/1-3-sm.PNG 480w ,https://baronhez.github.io/media/posts/5/responsive/1-3-md.PNG 768w ,https://baronhez.github.io/media/posts/5/responsive/1-3-lg.PNG 1024w ,https://baronhez.github.io/media/posts/5/responsive/1-3-xl.PNG 1360w ,https://baronhez.github.io/media/posts/5/responsive/1-3-2xl.PNG 1600w"  height="48" width="356" alt="Now, enter the "All in one" version." />
      <figcaption>Now, enter the "All in one" version.</figcaption>
    </figure>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/5/1-4.PNG" sizes="100vw" srcset="https://baronhez.github.io/media/posts/5/responsive/1-4-xs.PNG 300w ,https://baronhez.github.io/media/posts/5/responsive/1-4-sm.PNG 480w ,https://baronhez.github.io/media/posts/5/responsive/1-4-md.PNG 768w ,https://baronhez.github.io/media/posts/5/responsive/1-4-lg.PNG 1024w ,https://baronhez.github.io/media/posts/5/responsive/1-4-xl.PNG 1360w ,https://baronhez.github.io/media/posts/5/responsive/1-4-2xl.PNG 1600w"  height="29" width="354" alt="Execute this file with admin privileges. Right click and then "Run as administrator"." />
      <figcaption>Execute this file with admin privileges. Right click and then "Run as administrator".</figcaption>
    </figure>

  <p>
    <i>&nbsp;</i>
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/5/1-5.PNG" sizes="100vw" srcset="https://baronhez.github.io/media/posts/5/responsive/1-5-xs.PNG 300w ,https://baronhez.github.io/media/posts/5/responsive/1-5-sm.PNG 480w ,https://baronhez.github.io/media/posts/5/responsive/1-5-md.PNG 768w ,https://baronhez.github.io/media/posts/5/responsive/1-5-lg.PNG 1024w ,https://baronhez.github.io/media/posts/5/responsive/1-5-xl.PNG 1360w ,https://baronhez.github.io/media/posts/5/responsive/1-5-2xl.PNG 1600w"  height="471" width="598" alt="If you want to activate only Windows, enter "1" using the keyboard. If you have installed Office in your computer, and you want to activate it, take into account that the activation only last 180 days. However, the windows activation is permanent using the first option." />
      <figcaption>If you want to activate only Windows, enter "1" using the keyboard. If you have installed Office in your computer, and you want to activate it, take into account that the activation only last 180 days. However, the windows activation is permanent using the first option.</figcaption>
    </figure>

  <p>
    Let the script run until all it's done. Then, check if windows have been activated.
  </p>

  <p>
    To check activation status in Windows 10, select the Start button, and then select Settings &gt; Update &amp; Security and then select Activation .  Your activation status will be listed next to Activation.
  </p>

  <p class="msg msg--highlight">
    Attention: An alternative to all of this is to use
<br><a href="https://github.com/kkkgo/KMS_VL_ALL" class="" target="_blank" rel="nofollow noopener">https://github.com/kkkgo/KMS_VL_ALL</a>
  </p>

  <p>
    Ok, by now you should have a windows 10 or 11 installed and activated in your computer :)
  </p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://baronhez.github.io/media/posts/5/wallhaven-x8ye3z.jpg" alt="" />
                
    <figure class="post__image post__image--wide">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/5/windows-AigsWJmvoEo-unsplash-2-2xl-2.jpg" sizes="100vw" srcset="https://baronhez.github.io/media/posts/5/responsive/windows-AigsWJmvoEo-unsplash-2-2xl-2-xs.jpg 300w ,https://baronhez.github.io/media/posts/5/responsive/windows-AigsWJmvoEo-unsplash-2-2xl-2-sm.jpg 480w ,https://baronhez.github.io/media/posts/5/responsive/windows-AigsWJmvoEo-unsplash-2-2xl-2-md.jpg 768w ,https://baronhez.github.io/media/posts/5/responsive/windows-AigsWJmvoEo-unsplash-2-2xl-2-lg.jpg 1024w ,https://baronhez.github.io/media/posts/5/responsive/windows-AigsWJmvoEo-unsplash-2-2xl-2-xl.jpg 1360w ,https://baronhez.github.io/media/posts/5/responsive/windows-AigsWJmvoEo-unsplash-2-2xl-2-2xl.jpg 1600w"  height="1067" width="1600" alt="" />
      
    </figure>

    <h2 id="trust-me-it-is-completely-easy-following-this-guide">
      Trust me, it is completely easy following this guide.
    </h2>

  <p>
    Hello! If you want to configure a computer to have Windows 10 activated for free (all of this works also for Windows 11 because Microsoft devs repeated the licensing system and like 90% of the internal functionality) then you will have to follow some simple steps.
  </p>

  <p>
    <b>Step 1:</b> You must get an ISO of w10 or w11 from anywhere.
<br>You can get it from <a href="https://www.microsoft.com/en-us/software-download" target="_blank" class="" rel="nofollow noopener">official sites</a> or from <a href="https://linuxct.space/Windows/" target="_blank" class="" rel="nofollow noopener">mirrors</a>:
  </p>

  <p>
    
  </p>

  <p>
    
  </p>

  <p>
    <b>W11 ISO
</b><br><u>Microsoft official:
</u><br><a href="https://www.microsoft.com/en-us/software-download/windows11" class="" target="_blank" rel="nofollow noopener">https://www.microsoft.com/en-us/software-download/windows11
<br></a><u>Mirror:
</u><br><a href="https://linuxct.space/Windows/" class="" target="_blank" rel="nofollow noopener">https://linuxct.space/Windows/</a>
  </p>

  <p>
    <b>W10 ISO:
</b><br><u>Microsoft official</u>:
<br><a href="https://www.microsoft.com/en-us/software-download/windows10" class="" target="_blank">https://www.microsoft.com/en-us/software-download/windows10
<br></a><u>Pirated Windows</u>, in case you want to choose a specific version:
<br><a href="https://tb.rg-adguard.net/public.php" target="_blank" class="" rel="nofollow noopener">https://tb.rg-adguard.net/public.php</a>
  </p>

  <p class="msg msg--highlight">
    <em><b>Attention:</b></em>
<br>As such, if you feel like it, you can download an ISO previously debloated by others and then you can go straight to the heart of the matter.<br><a href="https://ameliorated.info/documentation.html" target="_blank" class="" rel="nofollow noopener">https://ameliorated.info/documentation.html</a>
  </p>

  <p>
    Ok, and now?
  </p>

  <p>
    <font color="#f2f2f5"><b>Step 2:&nbsp;</b></font>Flash the ISO on a pendrive with at least 8 gigabytes of space (it's a lot, I know, but it's a big ISO).
<br>You have several options to do it, but if you already have another PC running Windows, I recommend you Rufus:
  </p>

  <p>
    Here is a quick tutorial:
  </p>

  <p>
    <a href="https://www.youtube.com/watch?v=Wt0Q-DBejIw" target="_blank" class="" data-link-popup-id="1661386907157">https://www.youtube.com/watch?v=Wt0Q-DBejIw</a>
  </p>

  <p>
    Here you can download the program:
  </p>

  <p>
    <a href="https://github.com/pbatard/rufus/releases/download/v3.17/rufus-3.17.exe" target="_blank" class="" rel="nofollow noopener">https://github.com/pbatard/rufus/releases/download/v3.17/rufus-3.17.exe</a>
  </p>

  <p>
    If you have a Linux PC, I recommend you Ventoy:
  </p>

  <p>
    <a href="https://linuxkamarada.com/en/2020/07/29/ventoy-create-a-multiboot-usb-drive-by-simply-copying-iso-images-to-it/" target="_blank" class="" rel="nofollow noopener">https://linuxkamarada.com/en/2020/07/29/ventoy-create-a-multiboot-usb-drive-by-simply-copying-iso-images-to-it/</a>
  </p>

  <p>
    Or&nbsp;SUSE imagewriter:&nbsp;<a href="https://software.opensuse.org/package/imagewriter" target="_blank" class="" rel="nofollow noopener">https://software.opensuse.org/package/imagewriter</a>
  </p>

  <p>
    <b>Step 3:</b> Insert the flashed usb into the machine where you want to install windows and once the installation environment starts, we can freely hit next until we&nbsp;get to the part that asks for an activation code.
<br>We have two options:
<br>We put one of these:
<br><a href="https://gist.github.com/Azhe403/d261f2aadccfc2fb20e00414342a3093" target="_blank" class="" rel="nofollow noopener">https://gist.github.com/Azhe403/d261f2aadccfc2fb20e00414342a3093
<br></a>Or we click the "I do not have an activation code" to continue with the installation.
  </p>

  <p>
    Well, assuming you haven't put in one of the activation codes I've put above, let's do a little trick to activate Windows.
  </p>

  <p>
    <b>Step 4:</b>&nbsp;You should be, by the end of the installation, in front of a empty windows desktop. Now we have to activate windows.
  </p>

  <p class="msg msg--highlight">
    If you want documentation for this step, go to <a href="https://massgrave.dev/" target="_blank" class="" rel="nofollow noopener">https://massgrave.dev/</a>
  </p>

  <p>
    Let's enter this webpage:<br><a href="https://github.com/massgravel/Microsoft-Activation-Scripts/releases" target="_blank" class="" rel="nofollow noopener">https://github.com/massgravel/Microsoft-Activation-Scripts/releases</a>
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/5/1-2.PNG" sizes="100vw" srcset="https://baronhez.github.io/media/posts/5/responsive/1-2-xs.PNG 300w ,https://baronhez.github.io/media/posts/5/responsive/1-2-sm.PNG 480w ,https://baronhez.github.io/media/posts/5/responsive/1-2-md.PNG 768w ,https://baronhez.github.io/media/posts/5/responsive/1-2-lg.PNG 1024w ,https://baronhez.github.io/media/posts/5/responsive/1-2-xl.PNG 1360w ,https://baronhez.github.io/media/posts/5/responsive/1-2-2xl.PNG 1600w"  height="196" width="895" alt="Pick the latest release of the program, in my case was the 1.6 version." />
      <figcaption>Pick the latest release of the program, in my case was the 1.6 version. Download the .7z file.</figcaption>
    </figure>

  <p>
    Now, we have to unzip this file. But we do not have any zip program yet. Let's jump there to another webpage in order to download useful programs. This webpage is <a href="https://ninite.com/" target="_blank" class="" rel="nofollow noopener">Ninite</a>. This webpage allows us to install multiple program just by executing one single exe file. Once you have marked the programs that you want to install, click the button "Get your ninite". Then, run the exe file you just downloaded.
  </p>

  <p>
    Ok, now that you have installed 7zip (I recommend that one, it's the best for me), unzip the file we previously downloaded. For me was <i>MAS_1.6_Password_1234.7z. </i>The password is 1234 (obviously).
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/5/1-3.PNG" sizes="100vw" srcset="https://baronhez.github.io/media/posts/5/responsive/1-3-xs.PNG 300w ,https://baronhez.github.io/media/posts/5/responsive/1-3-sm.PNG 480w ,https://baronhez.github.io/media/posts/5/responsive/1-3-md.PNG 768w ,https://baronhez.github.io/media/posts/5/responsive/1-3-lg.PNG 1024w ,https://baronhez.github.io/media/posts/5/responsive/1-3-xl.PNG 1360w ,https://baronhez.github.io/media/posts/5/responsive/1-3-2xl.PNG 1600w"  height="48" width="356" alt="Now, enter the "All in one" version." />
      <figcaption>Now, enter the "All in one" version.</figcaption>
    </figure>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/5/1-4.PNG" sizes="100vw" srcset="https://baronhez.github.io/media/posts/5/responsive/1-4-xs.PNG 300w ,https://baronhez.github.io/media/posts/5/responsive/1-4-sm.PNG 480w ,https://baronhez.github.io/media/posts/5/responsive/1-4-md.PNG 768w ,https://baronhez.github.io/media/posts/5/responsive/1-4-lg.PNG 1024w ,https://baronhez.github.io/media/posts/5/responsive/1-4-xl.PNG 1360w ,https://baronhez.github.io/media/posts/5/responsive/1-4-2xl.PNG 1600w"  height="29" width="354" alt="Execute this file with admin privileges. Right click and then "Run as administrator"." />
      <figcaption>Execute this file with admin privileges. Right click and then "Run as administrator".</figcaption>
    </figure>

  <p>
    <i>&nbsp;</i>
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://baronhez.github.io/media/posts/5/1-5.PNG" sizes="100vw" srcset="https://baronhez.github.io/media/posts/5/responsive/1-5-xs.PNG 300w ,https://baronhez.github.io/media/posts/5/responsive/1-5-sm.PNG 480w ,https://baronhez.github.io/media/posts/5/responsive/1-5-md.PNG 768w ,https://baronhez.github.io/media/posts/5/responsive/1-5-lg.PNG 1024w ,https://baronhez.github.io/media/posts/5/responsive/1-5-xl.PNG 1360w ,https://baronhez.github.io/media/posts/5/responsive/1-5-2xl.PNG 1600w"  height="471" width="598" alt="If you want to activate only Windows, enter "1" using the keyboard. If you have installed Office in your computer, and you want to activate it, take into account that the activation only last 180 days. However, the windows activation is permanent using the first option." />
      <figcaption>If you want to activate only Windows, enter "1" using the keyboard. If you have installed Office in your computer, and you want to activate it, take into account that the activation only last 180 days. However, the windows activation is permanent using the first option.</figcaption>
    </figure>

  <p>
    Let the script run until all it's done. Then, check if windows have been activated.
  </p>

  <p>
    To check activation status in Windows 10, select the Start button, and then select Settings &gt; Update &amp; Security and then select Activation .  Your activation status will be listed next to Activation.
  </p>

  <p class="msg msg--highlight">
    Attention: An alternative to all of this is to use
<br><a href="https://github.com/kkkgo/KMS_VL_ALL" class="" target="_blank" rel="nofollow noopener">https://github.com/kkkgo/KMS_VL_ALL</a>
  </p>

  <p>
    Ok, by now you should have a windows 10 or 11 installed and activated in your computer :)
  </p>


  <p>
    <b>Extra optional steps:</b>&nbsp;
  </p>

  <ol>
    <li>You should <u>update Windows</u> right now, even if the install is fresh.</li><li>Debloat Windows deleting telemetry and other stuff: Run this on Powershell:&nbsp;<b style="font-style: italic;">iwr -useb https://git.io/debloat|iex</b>.<b style="font-style: italic;">&nbsp;</b>Or this:&nbsp;<b>iex ((New-Object
</b><br><b>System.Net.WebClient).DownloadString('https://git.io/JJ8R4'))</b>.</li><li>Disable startup programs. Enter <b>Windows Key+R</b>, write&nbsp;<b style="font-style: italic;">shell:startup</b>, hit enter<i>&nbsp;</i>and delete all the programs which start on startup.</li><li>Enter <b>Windows Key+R</b>, write&nbsp;<b>appwiz.cpl</b>, hit enter and uninstall all the&nbsp;unnecessary programs in your machine.<br></li>
  </ol>
            ]]>
        </content>
    </entry>
</feed>
