{
    "version": "https://jsonfeed.org/version/1",
    "title": "blogHez",
    "description": "",
    "home_page_url": "https://baronhez.github.io",
    "feed_url": "https://baronhez.github.io/feed.json",
    "user_comment": "",
    "author": {
        "name": "Jonathan Ródenas López"
    },
    "items": [
        {
            "id": "https://baronhez.github.io/como-montar-un-servidor-torrent-para-ver-peliculas-y-series-gratis-en-espanol/",
            "url": "https://baronhez.github.io/como-montar-un-servidor-torrent-para-ver-peliculas-y-series-gratis-en-espanol/",
            "title": "Cómo montar un servidor torrent para ver películas y series gratis (en español)",
            "summary": "Lo pillo&hellip;",
            "content_html": "\n  <p>\n    Lo pillo quieres desplegar un servidor torrent para ver series y películas pirata sin la molestia de leer toneladas de documentación. Bueno, esta es una guía directa para desplegar todo en sólo cinco minutos. Pongámonos manos a la obra. (Estoy asumiendo que sabes lo más básico de cómo manejar Linux, Docker y una terminal).\n  </p>\n\n    <h2 id=\"paso-1-instalar-docker-y-dockercompose\">\n      Paso #1: Instalar Docker y Docker-Compose.\n    </h2>\n\n  <p>\n    [MANUAL] Primero, instala docker y docker-compose:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>sudo apt update\nsudo apt install apt-transport-https ca-certificates curl software-properties-common\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\nsudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable\"\nsudo apt install docker-ce\nsudo usermod -aG docker &lt;username&gt;\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.26.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose</code></pre>\n\n  <p>\n    [FASTEST] O ejecuta este comando:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>/bin/bash -c \"$(curl -fsSL https://git.io/JDGfm)\"</code></pre>\n\n  <p>\n    El contenido del script bash ejecutado es el siguiente:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>sudo apt-get remove docker docker-engine docker.io containerd runc\nsudo apt-get updatesudo apt-get install -y \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-releasesudo rm -rf /usr/share/keyrings/docker-archive-keyring.gpgcurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpgecho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/nullsudo apt-get updatesudo apt-get install -y docker-ce docker-ce-cli containerd.iosudo usermod -a -G docker $USERsudo curl -L \"https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-linux-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n</code></pre>\n\n    <h2 id=\"paso-2-descargar-mi-carpeta-de-configuracin\">\n      Paso #2: Descargar mi carpeta de configuración.\n    </h2>\n\n  <p>\n    La forma más rápida de configurar esto es tomar prestada mi configuración, confía en mí. Descarga esta <a href=\"https://baronhez.github.io/media/files/jellyfin.7z\" download>carpeta comprimida</a> en tu servidor.\n  </p>\n\n    <h2 id=\"paso-3-crear-el-archivo-dockercompose\">\n      Paso #3: Crear el archivo Docker-Compose.\n    </h2>\n\n  <p>\n    Bien, dentro de la carpeta de configuración (<a href=\"https://linux.die.net/man/1/7z\" target=\"_blank\" rel=\"nofollow noopener\">descomprímela</a>), verás un archivo docker-compose.yml. Edita el contenido con este comando:\n  </p>\n<pre class=\"line-numbers  language-yaml\"><code>version: \"3.7\"\nservices:\n  jellyfin:\n    image: lscr.io/linuxserver/jellyfin:latest\n    container_name: jellyfin\n    environment: &env\n      - PUID=&lt;Enter your USER_ID&gt;\n      - PGID=&lt;Enter your GROUP_ID&gt;\n      - TZ=&lt;Enter your time zone&gt;\n    volumes:\n      - ./config/jellyfin:/config\n      - ./library/series:/data/series\n      - ./library/movies:/data/movies\n    ports:\n      - 8096:8096\n      - 8920:8920 #optional\n      - 7359:7359/udp #optional\n      - 1900:1900/udp #optional\n    restart: &restartpolicy unless-stopped\n  radarr:\n    image: lscr.io/linuxserver/radarr:latest\n    container_name: radarr\n    environment: *env\n    volumes:\n      - ./config/arr/radarr/config:/config\n      - ./library/movies:/data/movies #optional\n      - ./downloads:/downloads #optional\n      - /etc/localtime:/etc/localtime:ro\n    ports:\n      - 7878:7878\n    restart: *restartpolicy\n  sonarr:\n    container_name: sonarr\n    image: cr.hotio.dev/hotio/sonarr:latest\n    restart: *restartpolicy\n    logging:\n      driver: json-file\n    network_mode: bridge\n    ports:\n      - 8989:8989\n    environment: *env\n    volumes:\n      - /etc/localtime:/etc/localtime:ro\n      - ./config/arr/sonarr/config:/config\n      - ./downloads:/downloads #optional\n  qbittorrent:\n    image: lscr.io/linuxserver/qbittorrent:latest\n    container_name: qbittorrent\n    environment:\n      - PUID=&lt;Enter your USER_ID&gt;\n      - PGID=&lt;Enter your GROUP_ID&gt;\n      - TZ=&lt;Enter your time zone&gt;\n      - WEBUI_PORT=9095\n    volumes:\n      - ./torrent/qbittorrent/config:/config\n      - ./downloads:/downloads\n    ports:\n      - 9095:9095\n      - 6881:6881\n      - 6881:6881/udp\n    restart: *restartpolicy\n  prowlarr:\n    image: lscr.io/linuxserver/prowlarr:develop\n    container_name: prowlarr\n    environment: *env\n    volumes:\n      - ./torrent/prowlarr/config:/config\n    ports:\n      - 9696:9696\n    restart: *restartpolicy</code></pre>\n\n    <h2 id=\"paso-4-ejecuta-tus-contenedores\">\n      Paso #4: Ejecuta tus contenedores!\n    </h2>\n<pre class=\"line-numbers  language-bash\"><code>sudo docker-compose up -d</code></pre>\n\n    <h2 id=\"paso-5-vamos-a-configurar-nuestros-indexadores\">\n      Paso #5: Vamos a configurar nuestros indexadores.\n    </h2>\n\n  <p>\n    En primer lugar, quiero aclarar que no es necesario tener un nombre de dominio. Con saber la IP de tu servidor, y a qué puertos tienes que acceder para conectarte a las interfaces web, es más que suficiente.\n  </p>\n\n  <p>\n    Personalmente, uso ingressRoutes (usando traefik como Ingress Controller) para conectarme a estas interfaces web gracias a los subdominios. Pero os dejo que decidáis cómo hacerlo, podéis usar Nginx reverse proxy, nginx manager, traefik reverse proxy en Docker....\n  </p>\n\n  <p>\n    Ok, primero tenemos que conectarnos a Prowlarr (usa http://&lt;tuIP&gt;<tu ip=\"\">:9696, en caso de que no quieras usar certificados de confianza o nombres de dominio):</tu>&nbsp;<br>\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-2xl.PNG 1600w\"  height=\"921\" width=\"944\" alt=\"\" />\n      <figcaption>Esta es la webUI de prowlarr. Vamos a añadir un nuevo indexador pulsando el botón azul.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-2.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-2-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-2-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-2-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-2-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-2-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-2-2xl.PNG 1600w\"  height=\"1191\" width=\"1073\" alt=\"\" />\n      <figcaption>Yo uso este para las películas de anime. Puedes usar cualquiera.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-4.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-4-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-4-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-4-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-4-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-4-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-4-2xl.PNG 1600w\"  height=\"868\" width=\"712\" alt=\"\" />\n      <figcaption>En este caso, para este indexador los valores por defecto deberían ser suficientes. Marca la casilla de Enable.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-5.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-5-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-5-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-5-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-5-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-5-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-5-2xl.PNG 1600w\"  height=\"710\" width=\"713\" alt=\"\" />\n      <figcaption>También uso este.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-6.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-6-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-6-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-6-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-6-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-6-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-6-2xl.PNG 1600w\"  height=\"832\" width=\"868\" alt=\"\" />\n      <figcaption>Para indexadores NZB, habitualmente vas a tener que user una API Key (suelen ser de pago).</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-7.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-7-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-7-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-7-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-7-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-7-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-7-2xl.PNG 1600w\"  height=\"938\" width=\"957\" alt=\"\" />\n      <figcaption>Ahora, ve a Settings -> Apps para añadir aplicaciones. Haz click en el botón de añadir aplicaciones de arriba.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-8.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-8-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-8-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-8-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-8-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-8-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-8-2xl.PNG 1600w\"  height=\"527\" width=\"1072\" alt=\"\" />\n      <figcaption>Tenemos que seleccionar Radarr (películas) y Sonarr (series) para esta guía. Hay algunas más como puedes ver (por ejemplo, Lidarr es para música).</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-11.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-11-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-11-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-11-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-11-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-11-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-11-2xl.PNG 1600w\"  height=\"767\" width=\"716\" alt=\"\" />\n      <figcaption>Tienes que poner tu API Key. Tal y como pone debajo, está en Radarr, en Settings -> General.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-10.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-10-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-10-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-10-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-10-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-10-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-10-2xl.PNG 1600w\"  height=\"826\" width=\"930\" alt=\"\" />\n      <figcaption>Esta es la API Key que tienes que utilizar. Lo mismo pasa con Sonarr, que tiene su propia API Key, también en Settings -> General.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-12.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-12-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-12-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-12-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-12-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-12-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-12-2xl.PNG 1600w\"  height=\"766\" width=\"714\" alt=\"\" />\n      <figcaption>Lo mismo va para Sonarr. Usa su API Key aquí y haz click en Test.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-13.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-13-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-13-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-13-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-13-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-13-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-13-2xl.PNG 1600w\"  height=\"238\" width=\"921\" alt=\"\" />\n      <figcaption>Tu pestaña de aplicaciones debería ser así.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-14.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-14-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-14-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-14-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-14-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-14-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-14-2xl.PNG 1600w\"  height=\"1163\" width=\"1228\" alt=\"\" />\n      <figcaption>Espera unos minutos. Luego, ve a Settings -> Indexers en Radarr y Sonarr y deberías ver algo así.</figcaption>\n    </figure>\n\n    <h2 id=\"paso-6-configura-tu-cliente-torrent\">\n      Paso #6: Configura tu cliente torrent.\n    </h2>\n\n  <p>\n    \"Pero quiero usar usenet en lugar de torrents\". Vale, pues haré una guía más completa teniendo en cuenta usenet. Pero por ahora, sigamos con los torrents.\n  </p>\n\n  <p>\n    En cualquier caso, <a href=\"https://morrismotel.com/servarr-pt3a-choosing-your-indexers/\" target=\"_blank\" rel=\"nofollow noopener\">aquí</a> tienes una lista de \"Pros y contras\".\n  </p>\n\n  <p>\n    Y <a href=\"https://trash-guides.info/Downloaders/qBittorrent/Basic-Setup/\" target=\"_blank\" rel=\"nofollow noopener\">aquí</a> tienes algo de documentación adicional.\n  </p>\n\n  <p>\n    Bien, para conectarnos a la webUI de qbittorrent, tenemos que usar el puerto 9095 (puedes cambiarlo en el archivo <b>docker-compose.yml</b>).\n  </p>\n\n  <p>\n    Conéctate a http://&lt;tuIP&gt;<suip>:9095, luego introduzca el nombre de usuario por defecto (admin) y la contraseña por defecto (adminadmin).</suip>\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-15.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-15-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-15-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-15-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-15-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-15-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-15-2xl.PNG 1600w\"  height=\"751\" width=\"836\" alt=\"\" />\n      <figcaption>Entra en Tools -> Options. Luego, en la pestaña Connection, marca las mismas opciones que yo. No voy a explicar por qué funciona esto, tal vez en la próxima guía.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-16.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-16-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-16-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-16-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-16-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-16-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-16-2xl.PNG 1600w\"  height=\"20\" width=\"318\" alt=\"\" />\n      <figcaption>Marca esta opción si tu server está en tu red interna de casa. Esta opción debería, por razones de seguridad, mantenerse desabilitada.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-3.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-3-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-3-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-3-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-3-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-3-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-3-2xl.PNG 1600w\"  height=\"678\" width=\"698\" alt=\"\" />\n      <figcaption>Ahora, en la pestaña de BitTorrent marca estas opciones.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-9.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-9-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-9-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-9-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-9-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-9-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-9-2xl.PNG 1600w\"  height=\"669\" width=\"691\" alt=\"\" />\n      <figcaption>Ahora, esta es mi pestaña de downloads.</figcaption>\n    </figure>\n\n    <h2 id=\"paso-7-configura-radarr-y-sonarr\">\n      Paso #7: Configura Radarr y Sonarr\n    </h2>\n\n  <p>\n    Radarr y Sonarr son muy similares. Así que la configuración que vamos a hacer es exactamente la misma para ambos. Vamos a usar Radarr como ejemplo pero la configuración es la misma para Sonarr también. Vamos a empezar.\n  </p>\n\n  <p>\n    Ve a http://&lt;tuIP&gt;<yourip>:7878, ve a Settings -&gt; Download Clients, haz click en el botón de añadir:</yourip>\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-17.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-17-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-17-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-17-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-17-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-17-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-17-2xl.PNG 1600w\"  height=\"1117\" width=\"1066\" alt=\"\" />\n      <figcaption>Deberías ver algo como esto.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-18.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-18-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-18-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-18-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-18-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-18-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-18-2xl.PNG 1600w\"  height=\"888\" width=\"823\" alt=\"\" />\n      <figcaption>Si quieres usar usenet, selecciona por ejemplo NZBGet y rellena la información.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-19.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-19-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-19-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-19-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-19-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-19-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-19-2xl.PNG 1600w\"  height=\"1188\" width=\"720\" alt=\"\" />\n      <figcaption>Para configurar QBitTorrent, usa la info del login de QBitTorrent.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-20.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-20-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-20-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-20-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-20-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-20-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-20-2xl.PNG 1600w\"  height=\"171\" width=\"661\" alt=\"\" />\n      \n    </figure>\n\n  <p>\n    Repite este proceso para Sonarr.\n  </p>\n\n    <h2 id=\"paso-8-configura-tus-perfiles-de-calidad\">\n      Paso #8: Configura tus perfiles de calidad.\n    </h2>\n\n  <p>\n    Este paso es importante, tanto es así que hay gente que ha creado <a href=\"https://github.com/recyclarr/recyclarr\" target=\"_blank\" rel=\"nofollow noopener\">herramientas</a> para optimizar este paso, usando <a href=\"https://github.com/recyclarr/recyclarr/wiki/Configuration-Reference\" target=\"_blank\" rel=\"nofollow noopener\">configuraciones especiales</a>.\n  </p>\n\n  <p>\n    Dejo <a href=\"https://trash-guides.info/Radarr/Radarr-Quality-Settings-File-Size/\" target=\"_blank\" rel=\"nofollow noopener\">aquí</a> algo de documentación.\n  </p>\n\n  <p>\n    Ve a la pestaña de Perfiles, tanto en Radarr como en Sonarr:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-21.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-21-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-21-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-21-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-21-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-21-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-21-2xl.PNG 1600w\"  height=\"589\" width=\"1600\" alt=\"\" />\n      \n    </figure>\n\n  <p>\n    Dejo aquí mis perfiles \"Any\":\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-22.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-22-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-22-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-22-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-22-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-22-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-22-2xl.PNG 1600w\"  height=\"843\" width=\"868\" alt=\"\" />\n      <figcaption>Mi perfil \"Any\" de Sonarr</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-23.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-23-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-23-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-23-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-23-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-23-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-23-2xl.PNG 1600w\"  height=\"831\" width=\"809\" alt=\"\" />\n      <figcaption>Mi perfil \"Any\" de Radarr.</figcaption>\n    </figure>\n\n  <p>\n    Ahora, vamos a buscar algunas series y películas. En Radarr o Sonarr, ve a la página de inicio, busca la película o la serie que quieres ver y selecciónala. Deberías ver una pantalla como ésta:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-24.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-24-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-24-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-24-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-24-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-24-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-24-2xl.PNG 1600w\"  height=\"431\" width=\"813\" alt=\"\" />\n      <figcaption>Selecciona tu perfil de calidad preferido y haz click en \"Add Movie\".</figcaption>\n    </figure>\n\n  <p>\n    Y una vez hagas esto, haz click en el poster de la película:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-25.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-25-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-25-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-25-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-25-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-25-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-25-2xl.PNG 1600w\"  height=\"771\" width=\"1600\" alt=\"\" />\n      <figcaption>Ve entonces a la pestaña \"Search\" y selecciona la opción que prefieras descargar en función de la calidad, el formato y el tamaño.</figcaption>\n    </figure>\n\n    <h2 id=\"paso-9-configura-tu-media-server-favorito\">\n      Paso #9: Configura tu Media Server favorito.\n    </h2>\n\n  <p>\n    En esta guía usaré <a href=\"https://github.com/jellyfin/jellyfin\" target=\"_blank\" rel=\"nofollow noopener\">Jellyfin</a>, pero siéntete libre de usar cualquier otro, como <a href=\"https://www.plex.tv/es/media-server-downloads/\" target=\"_blank\" rel=\"nofollow noopener\">Plex</a>, <a href=\"https://github.com/jesec/flood\" target=\"_blank\" rel=\"nofollow noopener\">qflood</a>... simplemente cambia el <b>docker-compose.yml</b> para desplegar tu aplicación seleccionada.\n  </p>\n\n  <p>\n    Para Jellyfin, ve a http://&lt;tuIP&gt;:8096.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-26.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-26-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-26-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-26-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-26-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-26-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-26-2xl.PNG 1600w\"  height=\"454\" width=\"1600\" alt=\"\" />\n      <figcaption>Esta es la Login Screen. Entra con tu username y password.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-27.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-27-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-27-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-27-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-27-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-27-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-27-2xl.PNG 1600w\"  height=\"261\" width=\"1600\" alt=\"\" />\n      <figcaption>Deberías entonces ver algo similar a esto.</figcaption>\n    </figure>\n\n  <p>\n    Ok, si haces click en \"Movies\", habrá una lista de películas descargadas.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/21/i-28.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/21/responsive/i-28-xs.PNG 300w ,https://baronhez.github.io/media/posts/21/responsive/i-28-sm.PNG 480w ,https://baronhez.github.io/media/posts/21/responsive/i-28-md.PNG 768w ,https://baronhez.github.io/media/posts/21/responsive/i-28-lg.PNG 1024w ,https://baronhez.github.io/media/posts/21/responsive/i-28-xl.PNG 1360w ,https://baronhez.github.io/media/posts/21/responsive/i-28-2xl.PNG 1600w\"  height=\"99\" width=\"1600\" alt=\"\" />\n      <figcaption>Incluso puedes filtrar tus películas y series en función de los géneros, hacer colecciones, conectarte a tu smart tv para visualizar allí la película que quieras ver...</figcaption>\n    </figure>\n\n  <p>\n    ¡Y eso es todo, amigos! Ya tienes un sitio de torrents funcionando en tu servidor sin ninguna molestia.\n  </p>\n\n  <p>\n    En cuanto sea posible subiré una configuración más compleja, con bazarr para los subtítulos, y ajustes de calidad tanto para sonarr como para radarr usando recyclarr, usando también jellyseer para gestionar las peticiones de los usuarios.\n  </p>\n\n  <p>\n    Disfruta de la piratería!\n  </p>\n\n    <h2 id=\"recomendaciones\">\n      Recomendaciones\n    </h2>\n\n  <p>\n    Configura un servicio de bazarr para obtener subtítulos. Haré una guía al respecto lo antes posible.\n  </p>\n\n  <p>\n    Establece un servicio para gestionar las solicitudes de los usuarios. Yo uso Jellyseer para este propósito. Haré una guía sobre esto también. Lo prometo.\n  </p>\n\n  <p>\n    No montes tu torrent server en un servidor que no es de su propiedad, como una instancia de AWS. Pueden bannearte por eso.\n  </p>\n\n  <p>\n    Si quieres retocar un poco Jellyfin, con temas y demás, mira este <a href=\"https://www.youtube.com/watch?v=DivZcyoY6bs\" target=\"_blank\" rel=\"nofollow noopener\">vídeo</a>.\n  </p>\n\n    <h2 id=\"extra-dockercompose\">\n      Extra Docker-Compose\n    </h2>\n\n  <p>\n    Si prefieres usar traefik como proxy inverso y qflood como Media Server, puedes usar este archivo <b>docker-compose.yml</b> en lugar del ya escrito en la carpeta comprimida jellyfin.7z (créditos a mi amigo Cristian por este archivo, lo he modificado para quitar cosas innecesarias):\n  </p>\n<pre class=\"line-numbers  language-yaml\"><code>  version: '3'\n  services:\n    qflood:\n      image: cr.hotio.dev/hotio/qflood:release-4.3.9--4.7.0\n      environment:\n        - PUID=1000\n        - PGID=100\n        - UMASK=002\n        - TZ=Europe/Madrid\n        - FLOOD_AUTH=true\n      ports:\n        - \"51413:51413\"\n      volumes:\n        - '/your/pathstorage/data/qflood:/config'\n        - '/your/path:/data'\n        - '/storage/shared/bittorrent:/downloads'\n      labels:\n      - traefik.enable=true\n      - traefik.http.routers.flood.entryPoints=web-secure\n      - traefik.http.routers.flood.rule=Host(`yourdomain`)\n      - traefik.http.services.flood.loadbalancer.server.port=3000\n      - traefik.http.routers.flood.service=flood\n      - traefik.http.routers.qbittorrent.entryPoints=web-secure\n      - traefik.http.routers.qbittorrent.rule=Host(`yourdomain`)\n      - traefik.http.services.qbittorrent.loadbalancer.server.port=8080\n      - traefik.http.routers.qbittorrent.service=qbittorrent\n      networks:\n        - rflood\n      restart: unless-stopped\n    prowlarr:\n      image: cr.hotio.dev/hotio/prowlarr:nightly\n      ports:  \n        - \"9696:9696\"\n      environment:\n        - PUID=1000\n        - PGID=1000\n        - UMASK=002\n        - TZ=Europe/Madrid\n      volumes:\n        - /your/path:/config\n      labels:\n        - traefik.enable=true\n        - traefik.http.routers.prowlarr.entryPoints=web-secure\n        - traefik.http.routers.prowlarr.rule=Host(`yourdomain`)\n        - traefik.http.services.prowlarr.loadbalancer.server.port=9696\n      networks:\n        - rflood\n      restart: unless-stopped\n    sonarr:\n      image: cr.hotio.dev/hotio/sonarr\n      ports:\n      - \"8989:8989\"\n      environment:\n      - PUID=1000\n      - PGID=100\n      - UMASK=002\n      - TZ=Europe/Madrid\n      volumes:\n      - './config/arr/sonarr/config:/config'   \n      - '/storage/shared/bittorrent:/storage'\n      labels:\n      - traefik.enable=true\n      - traefik.http.routers.sonarr.entryPoints=web-secure\n      - traefik.http.routers.sonarr.rule=Host(`yourdomain`)\n      - traefik.http.services.sonarr.loadbalancer.server.port=8989\n      networks:\n      - rflood\n      restart: unless-stopped\n    radarr:\n      image: cr.hotio.dev/hotio/radarr\n      ports:\n      - \"7878:7878\"\n      environment:\n      - PUID=1000\n      - PGID=100\n      - UMASK=002\n      - TZ=Europe/Madrid\n      volumes:\n      - './config/arr/radarr/config:/config'\n      - '/storage/shared/bittorrent:/storage'\n      labels:\n      - traefik.enable=true\n      - traefik.http.routers.radarr.entryPoints=web-secure\n      - traefik.http.routers.radarr.rule=Host(`yourdomain`)\n      - traefik.http.services.radarr.loadbalancer.server.port=7878\n      networks:\n      - rflood\n      restart: unless-stopped\n    bazarr:\n      image: hotio/bazarr\n      ports:\n      - \"6767:6767\"\n      environment:\n      - PUID=1000\n      - PGID=1000\n      - UMASK=002\n      - TZ=Europe/Madrid\n      volumes:\n      - ./config/arr/bazarr/config:/config\n      - /storage/shared/bittorrent/media:/storage/media\n      labels:\n      - traefik.enable=true\n      - traefik.http.routers.bazarr.entryPoints=web-secure\n      - traefik.http.routers.bazarr.rule=Host(`yourdomain`)\n      - traefik.http.services.bazarr.loadbalancer.server.port=6767      \n      networks:\n      - rflood      \n      restart: unless-stopped\n  networks:\n    rflood:\n      driver: bridge</code></pre>\n\n  <p>\n    Como puedes ver, tienes total libertad para elegir dónde quieres almacenar tus datos y tu configuración. Establece una ruta donde diga \"/tu/ruta\". Además, se incluye el servicio bazarr (para los subtítulos).\n  </p>\n\n    <h2 id=\"crditos\">\n      Créditos\n    </h2>\n\n  <p>\n    Gracias a mi amigo Edu, por descubrirme Servarr.\n  </p>\n\n  <p>\n    <a href=\"https://wiki.servarr.com/\" target=\"_blank\" rel=\"nofollow noopener\">https://wiki.servarr.com/</a>\n  </p>\n\n  <p>\n    <a href=\"https://trash-guides.info/\" target=\"_blank\" rel=\"nofollow noopener\">TRaSH Guides</a>\n  </p>\n\n  <p>\n    <a href=\"https://morrismotel.com/servarr-pt3b-prowlarr-sonarr-radarr/\" target=\"_blank\" rel=\"nofollow noopener\">https://morrismotel.com/servarr-pt3b-prowlarr-sonarr-radarr/</a>\n  </p>",
            "image": "https://baronhez.github.io/media/posts/21/i-29.PNG",
            "author": {
                "name": "Jonathan Ródenas López"
            },
            "tags": [
                   "Torrent",
                   "Self-hosted",
                   "Media",
                   "Docker-compose",
                   "Docker"
            ],
            "date_published": "2022-09-17T14:59:47+02:00",
            "date_modified": "2022-09-17T15:29:36+02:00"
        },
        {
            "id": "https://baronhez.github.io/how-to-build-a-docker-media-server/",
            "url": "https://baronhez.github.io/how-to-build-a-docker-media-server/",
            "title": "How to mount a torrent server to watch movies and series for free",
            "summary": "You want&hellip;",
            "content_html": "\n  <p>\n    You want to deploy a self-hosted media server without the hassle of reading tons of documentation. Well, this is a straight-forward guide to deploy everything in just five minutes. Let's get into it!&nbsp;(I'm assuming you know the basics of how to manage Docker and a terminal shell).\n  </p>\n\n    <h2 id=\"step-1-install-docker-and-dockercompose\">\n      Step #1: Install Docker and Docker-Compose.\n    </h2>\n\n  <p>\n    [MANUAL] First, install docker and docker-compose:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>sudo apt update\nsudo apt install apt-transport-https ca-certificates curl software-properties-common\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\nsudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable\"\nsudo apt install docker-ce\nsudo usermod -aG docker &lt;username&gt;\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.26.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n</code></pre>\n\n  <p>\n    [FASTEST] Or run this command:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>/bin/bash -c \"$(curl -fsSL https://git.io/JDGfm)\"</code></pre>\n\n  <p>\n    The content of the executed bash script is as follows:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>sudo apt-get remove docker docker-engine docker.io containerd runc\nsudo apt-get updatesudo apt-get install -y \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-releasesudo rm -rf /usr/share/keyrings/docker-archive-keyring.gpgcurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpgecho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/nullsudo apt-get updatesudo apt-get install -y docker-ce docker-ce-cli containerd.iosudo usermod -a -G docker $USERsudo curl -L \"https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-linux-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose</code></pre>\n\n    <h2 id=\"step-2-download-my-configuration-folder\">\n      Step #2: Download my configuration folder.\n    </h2>\n\n  <p>\n    The fastest way to set this up is to borrow my setup, trust me. Download this&nbsp;<a href=\"https://baronhez.github.io/media/files/jellyfin.7z\" download class=\"\" data-link-popup-id=\"1662262428607\">zipped folder</a>&nbsp;to your server.\n  </p>\n\n    <h2 id=\"step-3-create-dockercompose-file\">\n      Step #3: Create Docker-Compose file.\n    </h2>\n\n  <p>\n    Ok, inside the configuration folder (<a href=\"https://linux.die.net/man/1/7z\" target=\"_blank\" rel=\"nofollow noopener\">unzip</a> it), you will see a&nbsp;<b>docker-compose.yml</b> file. Edit the content with this command:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>nano docker-compose.yml</code></pre>\n\n  <p>\n    Edit this content (You have to enter your time zone, PUID and PGID):\n  </p>\n<pre class=\"line-numbers  language-yaml\"><code>version: \"3.7\"\nservices:\n  jellyfin:\n    image: lscr.io/linuxserver/jellyfin:latest\n    container_name: jellyfin\n    environment: &env\n      - PUID=&lt;Enter your USER_ID&gt;\n      - PGID=&lt;Enter your GROUP_ID&gt;\n      - TZ=&lt;Enter your time zone&gt;\n    volumes:\n      - ./config/jellyfin:/config\n      - ./library/series:/data/series\n      - ./library/movies:/data/movies\n    ports:\n      - 8096:8096\n      - 8920:8920 #optional\n      - 7359:7359/udp #optional\n      - 1900:1900/udp #optional\n    restart: &restartpolicy unless-stopped\n  radarr:\n    image: lscr.io/linuxserver/radarr:latest\n    container_name: radarr\n    environment: *env\n    volumes:\n      - ./config/arr/radarr/config:/config\n      - ./library/movies:/data/movies #optional\n      - ./downloads:/downloads #optional\n      - /etc/localtime:/etc/localtime:ro\n    ports:\n      - 7878:7878\n    restart: *restartpolicy\n  sonarr:\n    container_name: sonarr\n    image: cr.hotio.dev/hotio/sonarr:latest\n    restart: *restartpolicy\n    logging:\n      driver: json-file\n    network_mode: bridge\n    ports:\n      - 8989:8989\n    environment: *env\n    volumes:\n      - /etc/localtime:/etc/localtime:ro\n      - ./config/arr/sonarr/config:/config\n      - ./downloads:/downloads #optional\n  qbittorrent:\n    image: lscr.io/linuxserver/qbittorrent:latest\n    container_name: qbittorrent\n    environment:\n      - PUID=&lt;Enter your USER_ID&gt;\n      - PGID=&lt;Enter your GROUP_ID&gt;\n      - TZ=&lt;Enter your time zone&gt;\n      - WEBUI_PORT=9095\n    volumes:\n      - ./torrent/qbittorrent/config:/config\n      - ./downloads:/downloads\n    ports:\n      - 9095:9095\n      - 6881:6881\n      - 6881:6881/udp\n    restart: *restartpolicy\n  prowlarr:\n    image: lscr.io/linuxserver/prowlarr:develop\n    container_name: prowlarr\n    environment: *env\n    volumes:\n      - ./torrent/prowlarr/config:/config\n    ports:\n      - 9696:9696\n    restart: *restartpolicy</code></pre>\n\n    <h2 id=\"step-4-run-your-containers\">\n      Step #4: Run your containers!\n    </h2>\n<pre class=\"line-numbers  language-bash\"><code>sudo docker-compose up -d</code></pre>\n\n    <h2 id=\"step-5-lets-set-up-our-indexers\">\n      Step #5: Let's set up our indexers.\n    </h2>\n\n  <p>\n    First of all, I want to clarify that it is not necessary to have a domain name. Knowing the IP of your server, and which ports you have to access to connect to the web interfaces, is more than enough.\n  </p>\n\n  <p>\n    Personally, I use ingressRoutes (using traefik as Ingress Controller) to connect to these web UIs thanks to subdomains. But I leave to you to decide how to do it, you can use Nginx reverse proxy, nginx manager, traefik reverse proxy in Docker....\n  </p>\n\n  <p>\n    Ok, first we have to connect to Prowlarr (use http:&lt;yourIP&gt;:9696, in case you don't want to use trusted certificates or domain names):\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-2.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-2-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-2-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-2-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-2-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-2-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-2-2xl.png 1600w\"  height=\"921\" width=\"944\" alt=\"\" />\n      <figcaption>This is the webUI of prowlarr. Let's add a New Indexer</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-3.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-3-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-3-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-3-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-3-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-3-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-3-2xl.png 1600w\"  height=\"1191\" width=\"1073\" alt=\"\" />\n      <figcaption>I use this one for anime movies. You can use anyone.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-4.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-4-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-4-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-4-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-4-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-4-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-4-2xl.png 1600w\"  height=\"868\" width=\"712\" alt=\"\" />\n      <figcaption>In this case, for this indexer the default values should be enough. Check the enable box.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-5.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-5-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-5-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-5-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-5-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-5-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-5-2xl.png 1600w\"  height=\"710\" width=\"713\" alt=\"\" />\n      <figcaption>I use this one too.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-6.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-6-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-6-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-6-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-6-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-6-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-6-2xl.png 1600w\"  height=\"832\" width=\"868\" alt=\"\" />\n      <figcaption>Usually, for NZB indexers you need an API Key.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-7.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-7-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-7-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-7-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-7-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-7-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-7-2xl.png 1600w\"  height=\"938\" width=\"957\" alt=\"\" />\n      <figcaption>Now, go to Settings -> Apps to add Applications</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-8.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-8-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-8-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-8-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-8-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-8-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-8-2xl.png 1600w\"  height=\"527\" width=\"1072\" alt=\"\" />\n      <figcaption>We have to select Radarr (movies) and Sonarr (series) for this guide. There are a few more as you can see (for instance, Lidarr is for music).</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-10.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-10-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-10-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-10-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-10-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-10-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-10-2xl.png 1600w\"  height=\"767\" width=\"716\" alt=\"\" />\n      <figcaption>You have to set your radar API Key. As it is written, is generated by Radarr in Settings -> General. Click on \"Test\" after that.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/i.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/i-xs.PNG 300w ,https://baronhez.github.io/media/posts/19/responsive/i-sm.PNG 480w ,https://baronhez.github.io/media/posts/19/responsive/i-md.PNG 768w ,https://baronhez.github.io/media/posts/19/responsive/i-lg.PNG 1024w ,https://baronhez.github.io/media/posts/19/responsive/i-xl.PNG 1360w ,https://baronhez.github.io/media/posts/19/responsive/i-2xl.PNG 1600w\"  height=\"826\" width=\"930\" alt=\"\" />\n      <figcaption>That's the API Key you have to use. Same goes for Sonarr and its API Key.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-13.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-13-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-13-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-13-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-13-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-13-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-13-2xl.png 1600w\"  height=\"766\" width=\"714\" alt=\"\" />\n      <figcaption>The same goes for Sonarr. Input your Sonarr API Key. Click on \"Test\" after that.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-14.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-14-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-14-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-14-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-14-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-14-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-14-2xl.png 1600w\"  height=\"238\" width=\"921\" alt=\"\" />\n      <figcaption>Your applications tab should look like this.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-15.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-15-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-15-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-15-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-15-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-15-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-15-2xl.png 1600w\"  height=\"1163\" width=\"1228\" alt=\"\" />\n      <figcaption>Wait a few minutes.  Then go to Settings -> Indexers inside Sonarr and Radarr and you should see something like this. </figcaption>\n    </figure>\n\n    <h2 id=\"step-6-set-up-your-torrent-client\">\n      Step #6: Set up your torrent client.\n    </h2>\n\n  <p>\n    \"But I want to use usenet instead of torrents\". Ok, well, I will make a more complete guide taking usenet into account. But for now, let's stick with torrents.\n  </p>\n\n  <p>\n    In any case, <a href=\"https://morrismotel.com/servarr-pt3a-choosing-your-indexers/\" target=\"_blank\" rel=\"nofollow noopener\">here</a> you have a \"Pros and cons\" list.\n  </p>\n\n  <p>\n    And <a href=\"https://trash-guides.info/Downloaders/qBittorrent/Basic-Setup/\" target=\"_blank\" rel=\"nofollow noopener\">here</a> you have some additional documentation.\n  </p>\n\n  <p>\n    Ok, in order to connect to the qbittorrent webUI, we have to use port 9095 (you can change this in the <b>docker-compose.yml</b> file).\n  </p>\n\n  <p>\n    Connect to http://&lt;yourIP&gt;:9095, then enter the default username (admin) and the default password (adminadmin).\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-16.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-16-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-16-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-16-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-16-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-16-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-16-2xl.png 1600w\"  height=\"751\" width=\"836\" alt=\"\" />\n      <figcaption>Enter in Tools -> Options. Then, in the Connection tab, mark the same options as me. I'm not going to explain why this works, maybe in the next guide.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-17.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-17-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-17-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-17-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-17-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-17-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-17-2xl.png 1600w\"  height=\"20\" width=\"318\" alt=\"\" />\n      <figcaption>Mark this option in case your server is at home, but should be disabled for several security reasons.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-18.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-18-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-18-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-18-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-18-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-18-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-18-2xl.png 1600w\"  height=\"678\" width=\"698\" alt=\"\" />\n      <figcaption>Now, in the BitTorrent tab, mark this.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-27.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-27-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-27-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-27-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-27-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-27-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-27-2xl.png 1600w\"  height=\"669\" width=\"691\" alt=\"\" />\n      <figcaption>Lastly, my Downloads tab.</figcaption>\n    </figure>\n\n    <h2 id=\"step-7-set-up-radarr-and-sonarr\">\n      Step #7: Set up Radarr and Sonarr.\n    </h2>\n\n  <p>\n    Radarr and Sonarr are very similar. So the configuration we're going to do is the exact same for both. We're going to use&nbsp;Radarr  as the example but the configuration is the same for Sonarr as well. Let's get started.\n  </p>\n\n  <p>\n    Go to http://&lt;yourIP&gt;:7878, then go to Settings -&gt; Download Clients, click the add button:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-20.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-20-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-20-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-20-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-20-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-20-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-20-2xl.png 1600w\"  height=\"1117\" width=\"1066\" alt=\"\" />\n      <figcaption>You should see something like this.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-21.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-21-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-21-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-21-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-21-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-21-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-21-2xl.png 1600w\"  height=\"888\" width=\"823\" alt=\"\" />\n      <figcaption>If you want to use usenet, select for instance NZBGet and fill the information.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-22.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-22-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-22-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-22-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-22-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-22-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-22-2xl.png 1600w\"  height=\"1188\" width=\"720\" alt=\"\" />\n      <figcaption>To configure bittorrent, use the login info to fill the gaps.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-23.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-23-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-23-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-23-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-23-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-23-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-23-2xl.png 1600w\"  height=\"171\" width=\"661\" alt=\"\" />\n      \n    </figure>\n\n  <p>\n    Repeat this process for Sonarr.\n  </p>\n\n    <h2 id=\"step-8-set-your-quality-profiles\">\n      Step #8: Set your quality profiles.\n    </h2>\n\n  <p>\n    This step is important, as important as people have created <a href=\"https://github.com/recyclarr/recyclarr\" target=\"_blank\" rel=\"nofollow noopener\">tools</a> to optimise this step, using <a href=\"https://github.com/recyclarr/recyclarr/wiki/Configuration-Reference\" target=\"_blank\" rel=\"nofollow noopener\">special configurations</a>.\n  </p>\n\n  <p>\n    I leave <a href=\"https://trash-guides.info/Radarr/Radarr-Quality-Settings-File-Size/\" target=\"_blank\" rel=\"nofollow noopener\">here</a> some good documentation.\n  </p>\n\n  <p>\n    Go to the Profiles tab, in Radarr and Sonarr:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-24.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-24-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-24-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-24-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-24-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-24-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-24-2xl.png 1600w\"  height=\"943\" width=\"2560\" alt=\"\" />\n      \n    </figure>\n\n  <p>\n    I leave here my \"Any\" profile for both services:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-25.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-25-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-25-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-25-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-25-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-25-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-25-2xl.png 1600w\"  height=\"843\" width=\"868\" alt=\"\" />\n      <figcaption>Sonar \"Any\" Profile</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-26.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-26-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-26-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-26-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-26-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-26-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-26-2xl.png 1600w\"  height=\"831\" width=\"809\" alt=\"\" />\n      <figcaption>Radarr \"Any\" Profile</figcaption>\n    </figure>\n\n  <p>\n    Now, let's get some series and movies. In Radarr or Sonarr, go to the home page, search for the movie or tv show you want to watch, and select it.&nbsp;You should see a screen like this one:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-11.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-11-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-11-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-11-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-11-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-11-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-11-2xl.png 1600w\"  height=\"431\" width=\"813\" alt=\"\" />\n      <figcaption>Select your preferred quality profile, and click on \"Add Movie\".</figcaption>\n    </figure>\n\n  <p>\n    Then, click on the movie poster.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-12.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-12-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-12-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-12-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-12-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-12-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-12-2xl.png 1600w\"  height=\"1122\" width=\"2329\" alt=\"\" />\n      <figcaption>Go to the search tab and select your preferred option based on size and format.</figcaption>\n    </figure>\n\n    <h2 id=\"step-9-set-up-your-favourite-media-server\">\n      Step #9: Set up your favourite media Server.\n    </h2>\n\n  <p>\n    In this guide I will use&nbsp;<a href=\"https://github.com/jellyfin/jellyfin\" target=\"_blank\" rel=\"nofollow noopener\">Jellyfin</a>, but feel free to use any other, like <a href=\"https://www.plex.tv/es/media-server-downloads/\" target=\"_blank\" rel=\"nofollow noopener\">Plex</a>, <a href=\"https://github.com/jesec/flood\" target=\"_blank\" rel=\"nofollow noopener\">qflood</a>... just change the <b>docker-compose.yml</b> to deploy your selected app.\n  </p>\n\n  <p>\n    For Jellyfin, go to http://&lt;yourIP&gt;:8096.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-9.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-9-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-9-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-9-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-9-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-9-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-9-2xl.png 1600w\"  height=\"726\" width=\"2560\" alt=\"\" />\n      <figcaption>Login screen. Just enter your username and password when prompted.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-19.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-19-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-19-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-19-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-19-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-19-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-19-2xl.png 1600w\"  height=\"418\" width=\"2560\" alt=\"\" />\n      <figcaption>You should be seeing something similar to this.</figcaption>\n    </figure>\n\n  <p>\n    Ok, if you click on \"Movies\", there will be a list of your downloaded movies displayed.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/19/server-28.png\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/19/responsive/server-28-xs.png 300w ,https://baronhez.github.io/media/posts/19/responsive/server-28-sm.png 480w ,https://baronhez.github.io/media/posts/19/responsive/server-28-md.png 768w ,https://baronhez.github.io/media/posts/19/responsive/server-28-lg.png 1024w ,https://baronhez.github.io/media/posts/19/responsive/server-28-xl.png 1360w ,https://baronhez.github.io/media/posts/19/responsive/server-28-2xl.png 1600w\"  height=\"159\" width=\"2560\" alt=\"\" />\n      <figcaption>You can even filter your movies and series depending of genres, make collections, connect to your smart tv to display there the movie you want to see...</figcaption>\n    </figure>\n\n  <p>\n    And that's all, folks! You have a torrent site running in your server with no hassle at all.\n  </p>\n\n  <p>\n    As soon as possible I will upload a more complex configuration, with bazarr for subtitles, and quality settings for both sonarr and radarr using recyclarr, also using jellyseer for managing user requests.\n  </p>\n\n  <p>\n    &nbsp;Enjoy the piracy!\n  </p>\n\n    <h2 id=\"recommendations\">\n      Recommendations\n    </h2>\n\n  <p>\n    Set a bazarr service to get subtitles. I will make a guide about it as soon as possible.\n  </p>\n\n  <p>\n    Set a service to manage user request. I use Jellyseer for this purpose. I will make a guide about it too. Pinky promise.\n  </p>\n\n  <p>\n    Do not run a torrent site in a server you don't own, like an AWS instance. They can ban you for that.\n  </p>\n\n  <p>\n    If you want to tweak Jellyfin a bit, with themes and stuff, check this <a href=\"https://www.youtube.com/watch?v=DivZcyoY6bs\" target=\"_blank\" rel=\"nofollow noopener\">video</a>.\n  </p>\n\n    <h2 id=\"extra-dockercompose\">\n      Extra Docker-Compose\n    </h2>\n\n  <p>\n    If you prefer to <a href=\"https://baronhez.github.io/b/\" target=\"_blank\">use traefik as a reverse proxy</a> and qflood as a media server, you can use this <b>docker-compose.yml</b>&nbsp;file&nbsp;instead the one already written in the jellyfin.7z compressed folder (credits to my friend Cristian for this file):\n  </p>\n<pre class=\"line-numbers  language-yaml\"><code>version: '3'\n  services:\n    qflood:\n      image: cr.hotio.dev/hotio/qflood:release-4.3.9--4.7.0\n      environment:\n        - PUID=1000\n        - PGID=100\n        - UMASK=002\n        - TZ=Europe/Madrid\n        - FLOOD_AUTH=true\n      ports:\n        - \"51413:51413\"\n      volumes:\n        - '/your/pathstorage/data/qflood:/config'\n        - '/your/path:/data'\n        - '/storage/shared/bittorrent:/downloads'\n      labels:\n      - traefik.enable=true\n      - traefik.http.routers.flood.entryPoints=web-secure\n      - traefik.http.routers.flood.rule=Host(`yourdomain`)\n      - traefik.http.services.flood.loadbalancer.server.port=3000\n      - traefik.http.routers.flood.service=flood\n      - traefik.http.routers.qbittorrent.entryPoints=web-secure\n      - traefik.http.routers.qbittorrent.rule=Host(`yourdomain`)\n      - traefik.http.services.qbittorrent.loadbalancer.server.port=8080\n      - traefik.http.routers.qbittorrent.service=qbittorrent\n      networks:\n        - rflood\n      restart: unless-stopped\n    prowlarr:\n      image: cr.hotio.dev/hotio/prowlarr:nightly\n      ports:\n        - \"9696:9696\"\n      environment:\n        - PUID=1000\n        - PGID=1000\n        - UMASK=002\n        - TZ=Europe/Madrid\n      volumes:\n        - /your/path:/config\n      labels:\n        - traefik.enable=true\n        - traefik.http.routers.prowlarr.entryPoints=web-secure\n        - traefik.http.routers.prowlarr.rule=Host(`yourdomain`)\n        - traefik.http.services.prowlarr.loadbalancer.server.port=9696\n      networks:\n        - rflood\n      restart: unless-stopped\n    sonarr:\n      image: cr.hotio.dev/hotio/sonarr\n      ports:\n      - \"8989:8989\"\n      environment:\n      - PUID=1000\n      - PGID=100\n      - UMASK=002\n      - TZ=Europe/Madrid\n      volumes:\n      - './config/arr/sonarr/config:/config'   \n      - '/storage/shared/bittorrent:/storage'\n      labels:\n      - traefik.enable=true\n      - traefik.http.routers.sonarr.entryPoints=web-secure\n      - traefik.http.routers.sonarr.rule=Host(`yourdomain`)\n      - traefik.http.services.sonarr.loadbalancer.server.port=8989\n      networks:\n      - rflood\n      restart: unless-stopped\n    radarr:\n      image: cr.hotio.dev/hotio/radarr\n      ports:\n      - \"7878:7878\"\n      environment:\n      - PUID=1000\n      - PGID=100\n      - UMASK=002\n      - TZ=Europe/Madrid\n      volumes:\n      - './config/arr/radarr/config:/config'\n      - '/storage/shared/bittorrent:/storage'\n      labels:\n      - traefik.enable=true\n      - traefik.http.routers.radarr.entryPoints=web-secure\n      - traefik.http.routers.radarr.rule=Host(`yourdomain`)\n      - traefik.http.services.radarr.loadbalancer.server.port=7878\n      networks:\n      - rflood\n      restart: unless-stopped\n    bazarr:\n      image: hotio/bazarr\n      ports:\n      - \"6767:6767\"\n      environment:\n      - PUID=1000\n      - PGID=1000\n      - UMASK=002\n      - TZ=Europe/Madrid\n      volumes:\n      - ./config/arr/bazarr/config:/config\n      - /storage/shared/bittorrent/media:/storage/media\n      labels:\n      - traefik.enable=true\n      - traefik.http.routers.bazarr.entryPoints=web-secure\n      - traefik.http.routers.bazarr.rule=Host(`yourdomain`)\n      - traefik.http.services.bazarr.loadbalancer.server.port=6767      \n      networks:\n      - rflood      \n      restart: unless-stopped\n  networks:\n    rflood:\n      driver: bridge\n</code></pre>\n\n  <p>\n    As you can see, you have total freedom to choose where you want to store your data and configuration. Set a path wherever it says <b>\"/your/path\"</b>. Also, the bazarr service (for subtitles) is included.\n  </p>\n\n    <h2 id=\"credits\">\n      Credits\n    </h2>\n\n  <p>\n    My friend Edu, for discover me Servarr.\n  </p>\n\n  <p>\n    <a href=\"https://wiki.servarr.com/\" target=\"_blank\" rel=\"nofollow noopener\">https://wiki.servarr.com/</a>\n  </p>\n\n  <p>\n    <a href=\"https://trash-guides.info/\" target=\"_blank\" rel=\"nofollow noopener\">TRaSH Guides</a>\n  </p>\n\n  <p>\n    <a href=\"https://morrismotel.com/servarr-pt3b-prowlarr-sonarr-radarr/\" target=\"_blank\" rel=\"nofollow noopener\">https://morrismotel.com/servarr-pt3b-prowlarr-sonarr-radarr/</a>\n  </p>",
            "image": "https://baronhez.github.io/media/posts/19/server.png",
            "author": {
                "name": "Jonathan Ródenas López"
            },
            "tags": [
                   "Torrent",
                   "Self-hosted",
                   "Media",
                   "Docker-compose",
                   "Docker"
            ],
            "date_published": "2022-09-16T17:42:04+02:00",
            "date_modified": "2022-09-17T15:00:26+02:00"
        },
        {
            "id": "https://baronhez.github.io/how-to-create-yaml-files/",
            "url": "https://baronhez.github.io/how-to-create-yaml-files/",
            "title": "How to create YAML files",
            "summary": "I'm not&hellip;",
            "content_html": "\n  <p>\n    I'm not going to explain what YAML is, nor its uses, if you want to learn how to create one, I'm pretty sure you already have that information. So let's get straight to the heart of the matter.\n  </p>\n\n  <p>\n    Let's start with basic syntax:\n  </p>\n<pre class=\"line-numbers  language-yaml\"><code># Remember \"Key: Value\". This key and value pair is called a map.\n\n# String variables\nvegetable: \"Lettuce\"\nfruit: \"apple\"\nanimal: 'dog'\n\n# String in multiple lines\ndutch: | \n I have a plan, Arthur,\n and this one is a good one.\n# Write a single line in multiple lines\nMultiline-message: &gt;\n this will \n all be \n in one single line.\n# Same as\nmessage: !!str this will all be in one single line\n#Numbers\nnumber: 5473\nmarks: 98.76\n# Boolean\nbooleanValue: !!bool No # n, N, false, False, FALSE\n# Same for true -&gt; yes, y, Y\n\n# Specify the type\nzero: !!int 0\npositiveNum: !!int 45\nnegativeNum: !!int -45\nbinaryNum: !!int 0b11001\noctalNum: !!int 06574\nhexa: !!int 0x45\ncommaValue: !!int +540_000 # 540,000\nexponential numbers: 6.023E56\n---\n# Floating point numbers\nmarks: !!float 56.89\ninfinite: !!float .inf\nnot a num: .nan\n\n# Null\nsurname: !!null Null # or null NULL ~\n~: this is a null key\n\n# Dates and time\ndate: !!timestamp 2002-12-14\nrandom time: 2001-12-15T02:59:43.10 +4:00\nno time zone: 2001-12-15T02:59:43.10</code></pre>\n\n  <p>\n    Now, the good stuff, sequence and maps:\n  </p>\n<pre class=\"line-numbers  language-yaml\"><code> cities: !!seq\n - new york\n - madrid\n# Same as\ncities: [new york, madrid]\n# If some of the keys of the seq will be empty, it is a sparse sequence\nsparse seq:\n - hey\n - how\n - \n - Null\n - sup\n# Example of a nested sequence\n- \n - mango\n - apple\n - banana\n-\n - marks\n - roll num\n - date\n# nested mappings: a map within a map\nname: Michael De Santa\nrole:\n  age: 45\n  job: bank robber\n  \n# Same as\nname: Michael De Santa\nrole: { age: 45, job: bank robber}\n\n# Pairs: keys may have duplicate values\n# !!pairs\n\npair example: !!pairs\n - job: student\n - job: teacher\n\n# same as\npair example: !!pairs [job: student, job: teacher]\n# this will be an array of hashtables\n\n# !!set will allow you to have unique values\nnames: !!set\n ? Franklin\n ? Michael\n ? Trevor\n\n# Dictionary !!omap\npeople: !!omap\n  - person1:\n     name: Franklin\n     age: 25\n     height: 1.83\n  - person2:\n     name: Trevor\n     age: 46\n     height: 1.86\n# I already cover yaml archor in my Docker-Compose guide, \n# but I will be covering it here again\nlikings: &likes\n  fav fruit: mango\n  dislikes: grapes\n\nperson1:\n  name: Michael\n  &lt;&lt;: *likes\n\nperson2:\n  name: Trevor\n  &lt;&lt;: *likes\n  dislikes: berries # This overrides the value of \"dislikes\" in the archor\n\n# This will look like\nperson1:\n  name: Michael\n  fav fruit: mango\n  dislikes: grapes\n\nperson2:\n  name: Trevor\n  fav fruit: mango\n  dislikes: berries\n</code></pre>\n\n  <p>\n    That's all. If you want something more complex... do it! This guide is supposed to be simple because it only focuses on syntax, like all \"Learn this language\" guides on the Internet.&nbsp;<br>\n  </p>\n\n    <h2 id=\"credits\">\n      Credits\n    </h2>\n\n  <p>\n    <a href=\"https://www.youtube.com/watch?v=IA90BTozdow&amp;list=WL&amp;index=17&amp;t=3054s\" target=\"_blank\" rel=\"nofollow noopener\">https://www.youtube.com/watch?v=IA90BTozdow&amp;list=WL&amp;index=17&amp;t=3054s</a>\n  </p>",
            "image": "https://baronhez.github.io/media/posts/20/i.webp",
            "author": {
                "name": "Jonathan Ródenas López"
            },
            "tags": [
            ],
            "date_published": "2022-09-12T11:08:12+02:00",
            "date_modified": "2022-09-17T17:05:58+02:00"
        },
        {
            "id": "https://baronhez.github.io/how-to-secure-docker/",
            "url": "https://baronhez.github.io/how-to-secure-docker/",
            "title": "How to secure Docker",
            "summary": "Some tips&hellip;",
            "content_html": "\n    <h2 id=\"some-tips-to-have-a-more-secure-experience-while-using-docker\">\n      Some tips to have a more secure experience while using Docker\n    </h2>\n\n  <p>\n    Ok, the other day I was browsing my bookmarks when I came across an interesting post about Docker security. Because of this, I'm going to share some tips for you to secure your Docker. This way, you will feel safer while using Docker to run some dangerous software, preventing access to your host machine.\n  </p>\n\n    <h2 id=\"tip-1-do-not-havenbspoutdated-containers-running-in-your-server\">\n      Tip #1: Do NOT have&nbsp;outdated containers running in your server.\n    </h2>\n\n  <p>\n    This applies too to Docker itself. Using software outdated, even when we use containers, is insecure, and can lead to vulnerabilities. Containers talk directly to the kernel, so a kernel related vulnerability which can allow the user to modify the kernel, can lead us to a disaster.\n  </p>\n\n    <h2 id=\"tip-2nbsp-do-not-expose-the-docker-daemon-socket\">\n      Tip #2:&nbsp; Do NOT expose the Docker daemon socket.\n    </h2>\n\n  <p>\n    \"But, if my containers need to comunicate with other containers...\" Well, do it at your own risk, buddy. I do not encourage anyone to do this. You can do it, but following good security practices, as seen in the <a href=\"https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-socket-option\" target=\"_blank\" rel=\"nofollow noopener\">Docker Documentation</a>.\n  </p>\n\n    <h2 id=\"tip-3-do-not-run-your-containers-as-root-user\">\n      Tip #3: Do NOT run your containers as root user.\n    </h2>\n\n  <p>\n    Use an unprivileged user, during runtime:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>docker run -u 4000 alpine\n</code></pre>\n\n  <p>\n    Or during build time:\n  </p>\n<pre class=\"line-numbers  language-docker\"><code>FROM alpine\nRUN groupadd -r myuser && useradd -r -g myuser myuser\n&lt;HERE DO WHAT YOU HAVE TO DO AS A ROOT USER LIKE INSTALLING PACKAGES ETC.&gt;\nUSER myuser\n</code></pre>\n\n  <p>\n    You should also <a href=\"https://docs.docker.com/engine/security/userns-remap/#enable-userns-remap-on-the-daemon\" target=\"_blank\" rel=\"nofollow noopener\">enable namespace support</a>.\n  </p>\n\n    <h2 id=\"tip-4-do-not-run-containers-with-all-capabilities\">\n      Tip #4: Do NOT run containers with all capabilities.\n    </h2>\n\n  <p>\n    For those who don't know what <a href=\"https://man7.org/linux/man-pages/man7/capabilities.7.html\" target=\"_blank\" rel=\"nofollow noopener\">capabilities</a>&nbsp;are, they are a set of privileges.&nbsp;Docker, by default, runs with only a subset of capabilities. But, you can drop some capabilities (using <b>--cap-drop</b>) to harden your docker containers, or add some capabilities (using <b>--cap-add</b>) if needed. Remember not to run containers with the <b>--privileged flag</b>&nbsp;(this will add ALL Linux kernel capabilities to the container).\n<br>\n<br>The most secure setup is to drop all capabilities<b> --cap-drop</b> all and then add only required ones:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>docker run --cap-drop all --cap-add CHOWN alpine</code></pre>\n\n    <h2 id=\"tip-5-do-not-let-any-container-to-escalate-privileges\">\n      Tip #5: Do NOT let any container to escalate privileges.\n    </h2>\n\n  <p>\n    Always run your docker images with <b>--security-opt=no-new-privileges</b> in order to prevent escalate privileges using setuid or setgid binaries:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>docker run --security-opt=no-new-privileges alpine</code></pre>\n\n    <h2 id=\"tip-6-do-not-allow-your-containers-to-communicate-between-them\">\n      Tip #6: Do NOT allow your containers to communicate between them.\n    </h2>\n\n  <p>\n    By default inter-container communication (<b>icc</b>) is enabled - it means that all containers can talk with each other (using docker0 bridged network). This can be disabled by running docker daemon with --icc=false flag.\n  </p>\n\n  <p>\n    If icc is disabled (icc=false) it is required to tell which containers can communicate using <b>--link=CONTAINER_NAME&nbsp;</b>or <b>ID:ALIAS </b>option:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>docker run --link=web alpine</code></pre>\n\n    <h2 id=\"tip-7-do-not-forget-about-using-a-good-security-module\">\n      Tip #7: Do NOT forget about using a good security module.\n    </h2>\n\n  <p>\n    I have seen information about&nbsp;<a href=\"https://docs.docker.com/engine/security/seccomp/\" target=\"_blank\" rel=\"nofollow noopener\">seccomp </a>or <a href=\"https://docs.docker.com/engine/security/apparmor/\" target=\"_blank\" rel=\"nofollow noopener\">AppArmor</a>. This will help you to protect yourself againts vulnerability.\n  </p>\n\n    <h2 id=\"tip-8-do-not-allow-your-containers-to-use-as-much-cpu-and-memory-as-they-can-set-limits\">\n      Tip #8: Do NOT allow your containers to use as much CPU and memory as they can. Set limits.\n    </h2>\n\n  <p>\n    You can limit memory, CPU, maximum number of restarts (--restart=on-failure:&lt;number of restarts&gt;<number_of_restarts>), maximum number of file descriptors (--ulimit nofile=&lt;number&gt;<number>) and maximum number of processes (--ulimit nproc=&lt;number&gt;<number>).</number></number></number_of_restarts>\n  </p>\n\n  <p>\n    Refer to the <a href=\"https://docs.docker.com/engine/reference/commandline/run/#set-ulimits-in-container---ulimit\" target=\"_blank\" rel=\"nofollow noopener\">documentation</a> for more information about ulimits, or to this <a href=\"https://docs.docker.com/config/containers/resource_constraints/\" target=\"_blank\" rel=\"nofollow noopener\">documentation </a>about memory and cpu limits during runtime.\n  </p>\n\n    <h2 id=\"tip-9-do-not-allow-your-containers-to-write-to-your-file-system-if-possible\">\n      Tip #9: Do NOT allow your containers to write to your file system if possible.\n    </h2>\n\n  <p>\n    If you can, use read-only&nbsp;using <b>--read-only</b> flag. For instance:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>docker run --read-only alpine sh -c 'echo \"whatever\" &gt; /tmp'</code></pre>\n\n  <p>\n    If an application inside a container has to save something temporarily, combine <b>--read-only</b> flag with<b> --tmpfs</b> like this:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>docker run --read-only --tmpfs /tmp alpine sh -c 'echo \"whatever\" &gt; /tmp/file'\n</code></pre>\n\n  <p>\n    In Docker-Compose would be something like:\n  </p>\n<pre class=\"line-numbers  language-yaml\"><code>version: \"3\"\nservices:\n  alpine:\n    image: alpine\n    read_only: true\n</code></pre>\n\n  <p>\n    It is possible to do it with volumes:\n  </p>\n<pre class=\"line-numbers  language-yaml\"><code>web:\n    container_name: web\n    image: nginx\n    volumes:\n      - /home/user/nginx/html:/usr/share/nginx/html:ro\n</code></pre>\n\n  <p>\n    This option is also available in runtime:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>docker run -v volume-name:/path/in/container:ro alpine</code></pre>\n\n  <p>\n    You can do this using the<b> --mount</b> option:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>docker run --mount source=volume-name,destination=/path/in/container,readonly alpine</code></pre>\n\n    <h2 id=\"tip-10-do-not-forget-aboutnbspstatic-analysis-tools\">\n      Tip #10: Do NOT forget about&nbsp;static analysis tools.\n    </h2>\n\n  <p>\n    There are a few useful tools that can help you in various ways.&nbsp;This list is from that article I previously mentioned above:\n  </p>\n\n    <h4 id=\"to-scan-your-containers-in-search-of-vulnerabilitiesnbsp\">\n      To scan your containers in search of vulnerabilities:&nbsp;\n    </h4>\n\n    <h5 id=\"free\">\n      Free\n    </h5>\n\n  <ul>\n    <li><a href=\"https://github.com/coreos/clair\" target=\"_blank\" rel=\"nofollow noopener\">Clair</a></li><li><a href=\"https://github.com/deepfence/ThreatMapper\" target=\"_blank\" rel=\"nofollow noopener\">ThreatMapper</a><br></li><li><a href=\"https://github.com/knqyf263/trivy\" target=\"_blank\" rel=\"nofollow noopener\" class=\"\">Trivy</a></li>\n  </ul>\n\n    <h5 id=\"commercial\">\n      Commercial\n    </h5>\n\n  <ul>\n    <li><a href=\"https://snyk.io/\" target=\"_blank\" rel=\"nofollow noopener\">Snyk</a>&nbsp;<b>(open source and free option available)</b></li><li><a href=\"https://anchore.com/opensource/\" target=\"_blank\" rel=\"nofollow noopener\">anchore</a>&nbsp;<b>(open source and free option available)</b><br></li><li><a href=\"https://jfrog.com/xray/\" target=\"_blank\" rel=\"nofollow noopener\">JFrog XRay</a><br></li><li><a href=\"https://www.qualys.com/apps/container-security/\" target=\"_blank\" rel=\"nofollow noopener\">Qualys</a><br></li>\n  </ul>\n\n    <h4 id=\"to-detect-secrets-in-images\">\n      To detect secrets in images:\n    </h4>\n\n  <ul>\n    <li><a href=\"https://github.com/GitGuardian/ggshield\" target=\"_blank\" rel=\"nofollow noopener\">ggshield</a>&nbsp;<b>(open source and free option available)</b></li><li><a href=\"https://github.com/deepfence/SecretScanner\" target=\"_blank\" rel=\"nofollow noopener\">SecretScanner&nbsp;</a>&nbsp;<b>(open source)</b></li>\n  </ul>\n\n    <h4 id=\"to-detect-misconfigurations-in-docker\">\n      To detect misconfigurations in Docker:\n    </h4>\n\n  <ul>\n    <li><a href=\"https://www.inspec.io/docs/reference/resources/docker/\" target=\"_blank\" rel=\"nofollow noopener\">inspec.io</a></li><li><a href=\"https://dev-sec.io/baselines/docker/\" target=\"_blank\" rel=\"nofollow noopener\">dev-sec.io</a><br></li><li><a href=\"https://github.com/docker/docker-bench-security\" target=\"_blank\" rel=\"nofollow noopener\">Docker Bench for Security</a></li>\n  </ul>\n\n    <h2 id=\"tip-11-do-not-forget-about-logs\">\n      Tip #11: Do NOT forget about logs.\n    </h2>\n\n  <p>\n    Set up an appropriate log level, you'll thank me later. Countless time I've been safe by logs. You should configure the Docker daemon to log events that you would want to review later:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>docker-compose --log-level info up  </code></pre>\n\n    <h2 id=\"tip-12-do-not-forget-about-linting-your-dockerfiles-during-build-time\">\n      Tip #12: Do NOT forget about linting your Dockerfiles during build time.\n    </h2>\n\n  <p>\n    It is as easy as following a few good practices:\n  </p>\n\n  <ul>\n    <li>Ensure a <b>USER </b>directive is specified.</li><li>Ensure the base image version is pinned.<br></li><li>Ensure the OS packages versions are pinned.<br></li><li>Avoid the use of <b>ADD </b>in favor of <b>COPY</b>.<br></li><li>Avoid curl bashing in <b>RUN </b>directives.</li>\n  </ul>\n\n  <p>\n    Aaaaaand that's it, folks. Following this tips, you should be safer while using Docker. Have a nice day, friend.\n  </p>\n\n    <h2 id=\"credits\">\n      Credits\n    </h2>\n\n  <p>\n    <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html\" target=\"_blank\" rel=\"nofollow noopener\">https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html</a>\n  </p>",
            "image": "https://baronhez.github.io/media/posts/18/dockerSec.jpeg",
            "author": {
                "name": "Jonathan Ródenas López"
            },
            "tags": [
                   "Security",
                   "Docker-compose",
                   "Docker"
            ],
            "date_published": "2022-09-03T22:28:37+02:00",
            "date_modified": "2022-09-03T22:33:00+02:00"
        },
        {
            "id": "https://baronhez.github.io/how-to-convert-different-files-online/",
            "url": "https://baronhez.github.io/how-to-convert-different-files-online/",
            "title": "How to convert different files online",
            "summary": "A curate&hellip;",
            "content_html": "\n    <h2 id=\"a-curate-selection-of-online-converters\" class=\"align-center\">\n      A curate selection of online converters.\n    </h2>\n\n  <p>\n    Image to ascii converter: <a href=\"https://github.com/TheZoraiz/ascii-image-converter\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/TheZoraiz/ascii-image-converter</a>\n  </p>\n\n  <p>\n    Video To Lottie Converter:&nbsp;<a href=\"https://isotropic.co/tool/video-to-lottie\" target=\"_blank\" rel=\"nofollow noopener\">https://isotropic.co/tool/video-to-lottie</a>\n  </p>\n\n  <p>\n    Multi-file converters:\n  </p>\n\n  <ul>\n    <li><a href=\"https://www.aconvert.com/\" target=\"_blank\" rel=\"nofollow noopener\">https://www.aconvert.com</a></li><li><a href=\"https://www.online-convert.com/es\" target=\"_blank\" rel=\"nofollow noopener\">https://www.online-convert.com/es</a><br></li><li><a href=\"https://convertio.co/\" target=\"_blank\" rel=\"nofollow noopener\">https://convertio.co/</a><br></li><li><a href=\"https://www.ilovepdf.com/\" target=\"_blank\" rel=\"nofollow noopener\">https://www.ilovepdf.com/</a><br></li><li><a href=\"https://tinywow.com/\" target=\"_blank\" rel=\"nofollow noopener\">https://tinywow.com/</a><br></li><li><a href=\"https://cloudconvert.com/\" target=\"_blank\">https://cloudconvert.com/</a><br></li><li><a href=\"https://www.onlineocr.net/\" target=\"_blank\" rel=\"nofollow noopener\">https://www.onlineocr.net/</a><br></li>\n  </ul>",
            "image": "https://baronhez.github.io/media/posts/17/i.jpg",
            "author": {
                "name": "Jonathan Ródenas López"
            },
            "tags": [
                   "Interesting Webpages"
            ],
            "date_published": "2022-09-03T00:04:14+02:00",
            "date_modified": "2022-09-17T16:56:59+02:00"
        },
        {
            "id": "https://baronhez.github.io/how-to-clean-your-docker/",
            "url": "https://baronhez.github.io/how-to-clean-your-docker/",
            "title": "How to clean your Docker.",
            "summary": "I'm not&hellip;",
            "content_html": "\n    <h2 id=\"im-not-joking-do-it-you-will-thank-me-later\" class=\"align-center\">\n      I'm not joking, do it, you will thank me later.\n    </h2>\n\n  <p>\n    The faster way of doing this is using the CLI. I explained how to do it in my <a href=\"https://baronhez.github.io/b/\" target=\"_blank\">Self-Hosting guide</a>, but I'm going to sum it up here.\n  </p>\n<pre class=\"line-numbers  language-bash\"><code># We can delete all stoped container, every network not use by al least one container, all dangling images and all dangling build cache.\ndocker system prune\n# We can delete all stoped container, every network not use by al least one container, every unused image and all build cache.\ndocker system prune -a\n# Do the same but filtering specific images\ndocker system prune --filter nginx:alpine\n# Or just the volumes\ndocker system prune --volumes # First way\ndocker volume prune # Second way\n# Or just the networks\ndocker volume prune\n# Or we can do the same but without asking for confirmation\ndocker system prune -a -f  </code></pre>\n\n  <p>\n    That's it, nice and fast.\n  </p>\n\n    <h2 id=\"credits\">\n      Credits\n    </h2>\n\n  <p>\n    <a href=\"https://wise.wtf/posts/docker-cleaning/\" target=\"_blank\">https://wise.wtf/posts/docker-cleaning/</a>\n  </p>",
            "image": "https://baronhez.github.io/media/posts/16/woman-collects-leaves-cleans-park.jpg",
            "author": {
                "name": "Jonathan Ródenas López"
            },
            "tags": [
                   "Docker"
            ],
            "date_published": "2022-08-31T04:20:22+02:00",
            "date_modified": "2022-08-31T04:20:22+02:00"
        },
        {
            "id": "https://baronhez.github.io/different-uses-for-docker/",
            "url": "https://baronhez.github.io/different-uses-for-docker/",
            "title": "Different uses for Docker",
            "summary": "A month&hellip;",
            "content_html": "\n  <p>\n    A month ago, I read a post in <a href=\"https://matt-rickard.com/non-obvious-docker-uses\" target=\"_blank\" rel=\"nofollow noopener\">Matt Rickard blog</a>&nbsp;about Docker uses barely known among Docker users. So here I am, sharing that knowledge with you, wise reader.\n  </p>\n\n    <h2 id=\"you-can-use-docker-as-a-compiler\">\n      You can use Docker as a compiler.\n    </h2>\n\n  <p>\n    <a href=\"https://docs.docker.com/engine/reference/commandline/build/#custom-build-outputs\" target=\"_blank\" rel=\"nofollow noopener\">Here</a> is the official documentation about this use case.&nbsp;\n  </p>\n\n  <p>\n    Instead of exporting the build artifacts as a Docker image, you can do it as files on the local filesystem, which can be helpful for producing local binaries, code generation, etc.\n  </p>\n\n  <p>\n    For example, we can use docker to export the artifact to a tar file:\n  </p>\n\n  <p>\n    \n  </p>\n<pre class=\"line-numbers  language-bash\"><code>docker build --output type=local,dest=out .</code></pre>\n\n  <p>\n    Feel free to visit the documentation for further information.\n  </p>\n\n    <h2 id=\"you-can-use-docker-build-a-taskrunner-alternative-tonbspimakei\">\n      You can use Docker build a task-runner alternative to&nbsp;<i>make.</i>\n    </h2>\n\n  <p>\n    Matt points in his post that, thanks to Docker Buildkit,&nbsp;you can write alternative frontends to build images, not only Dockerfiles. This functionality is described <a href=\"https://matt-rickard.com/building-a-new-dockerfile-frontend\" target=\"_blank\" rel=\"nofollow noopener\">here</a>.\n  </p>\n\n    <h2 id=\"you-can-use-docker-registry-to-store-tarballs\">\n      You can use Docker registry to store tarballs.\n    </h2>\n\n  <p>\n    Because docker registries only store tarballs and metadata, it is easy to set up a place to store configuration.\n  </p>\n\n    <h2 id=\"you-can-use-git-repositories-as-docker-images\">\n      You can use git repositories as Docker images\n    </h2>\n\n  <p>\n    Matt points this possibility in this <a href=\"https://matt-rickard.com/docker-merge/\" target=\"_blank\" rel=\"nofollow noopener\">post</a>. To sum it up, \"Docker merge is a CLI utility that provides a proof-of-concept strategy to merge docker images\".\n  </p>\n\n  <p>\n    So, you can use that tool to&nbsp;to hijack the \"git merge\" strategies to natively \"merge\" docker layers.\n  </p>\n\n    <h2 id=\"you-can-use-docker-a-crossplatform-compatibility-layer\">\n      You can use Docker a cross-platform compatibility layer.\n    </h2>\n\n  <p>\n    The most obvious case for this is the use of Docker Desktop (if you are using this in your company, use Rancher instead).\n  </p>\n\n    <h2 id=\"you-can-use-docker-to-build-linux-kernels\">\n      You can use Docker to build Linux kernels\n    </h2>\n\n  <p>\n    You can do it by using <a href=\"https://github.com/linuxkit/linuxkit\" target=\"_blank\" rel=\"nofollow noopener\">LinuxKit</a>.\n  </p>\n\n  <p>\n    Those where the examples mentioned in the post, I hope you find them useful!\n  </p>\n\n    <h2 id=\"credits\">\n      Credits\n    </h2>\n\n  <p>\n    <a href=\"https://matt-rickard.com/\" target=\"_blank\" rel=\"nofollow noopener\">Matt Rickard</a>\n  </p>",
            "image": "https://baronhez.github.io/media/posts/15/i.jpg",
            "author": {
                "name": "Jonathan Ródenas López"
            },
            "tags": [
                   "Docker"
            ],
            "date_published": "2022-08-31T04:10:08+02:00",
            "date_modified": "2022-09-17T17:01:06+02:00"
        },
        {
            "id": "https://baronhez.github.io/docker-compose-best-practices/",
            "url": "https://baronhez.github.io/docker-compose-best-practices/",
            "title": "Docker-Compose Best Practices",
            "summary": "Or \"The&hellip;",
            "content_html": "\n    <h2 id=\"or-the-best-way-to-use-dockercompose-pick-your-poison-\">\n      Or \"The best way to use Docker-Compose\", pick your poison. \n    </h2>\n\n  <p>\n    Ok, I get it. You want to use Docker-Compose in your working environment, but you don't want to destroy everything in the process, and at the same time, get the most out of it.\n  </p>\n\n  <p>\n    Here you go, 6 easy-to-follow tips for you, fellow DevOps!\n  </p>\n\n    <h2 id=\"tip-1-do-not-rebuild-your-image-each-time-you-make-a-change-in-code-use-volumes-instead\">\n      Tip #1: Do NOT rebuild your image each time you make a change in code, use volumes instead.\n    </h2>\n\n  <p>\n    One of my best friends was having a hard time a few months ago, because every time he had to change a line in his python program, he had to rebuild the docker image, and then deploy that new image to the server (what 0 CI/CD pipelines do to a man, hehe).\n  </p>\n\n  <p>\n    The answer to that problem was to use volumes from the beginning. If you, wise reader, save the code in a directory and then, when building the image, use that directory as the volume, the only thing you will have to do to apply the changes made to the code is to restart the container. \n  </p>\n\n  <p>\n    The most easy-to-see example is a nginx image. Save your .html page in a directory, mount that directory as a volume, like:\n  </p>\n<pre class=\"line-numbers  language-yaml\"><code> volumes:\n      - /home/example/index.html:/usr/share/nginx/html:ro</code></pre>\n\n  <p>\n    And then, build and deploy that image as a container.\n  </p>\n\n  <p>\n    If you want to make a change to your web page, change the index.html file and then restart the container. You will see the changes immediately.&nbsp;\n  </p>\n\n    <h2 id=\"tip-2-be-smart-do-not-write-the-same-file-two-times-for-dev-and-prod\">\n      Tip #2: Be smart, do NOT write the same file two times for dev and prod.\n    </h2>\n\n  <p>\n    Ok, assuming that you are developing and application, and you need to use some kind of <a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"nofollow noopener\">Webpack</a> or a PostgresDB ONLY in the dev environment... well, you can use the same docker-compose.yml file and the same .env file, but making a lot of changes each time you have to deploy to prod... On the other hand, that's annoying and awful, so, let's use an override file!\n  </p>\n\n  <p>\n    But what is an override file and why is it so useful in this case?\n  </p>\n\n  <p>\n    Well, imagine that you have a file like this one:\n  </p>\n<pre class=\"line-numbers  language-yaml\"><code># docker-compose.yml\nweb:\n  image: example/my_web_app:latest\n  depends_on:\n    - db\n    - cache\n\ndb:\n  image: postgres:latest\n\ncache:\n  image: redis:latest\n</code></pre>\n\n  <p>\n    If you, for testing purposes, want to deploy this application while exposing some ports, mount your code as a volume, and build the web image, then you should use this override file:\n  </p>\n<pre class=\"line-numbers  language-yaml\"><code># docker-compose.override.yml\nweb:\n  build: .\n  volumes:\n    - '.:/code'\n  ports:\n    - 8883:80\n  environment:\n    DEBUG: 'true'\n\ndb:\n  command: '-d'\n  ports:\n    - 5432:5432\n\ncache:\n  ports:\n    - 6379:6379\n</code></pre>\n\n  <p>\n    Then, while having both files in the same directory, run:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>docker-compose up</code></pre>\n\n  <p>\n    Now, watch in amazement as the services of both archives are deployed at the same time. The reason is that docker-compose search in the current directory for a file named <b>docker-compose.yml</b> or <b>docker-compose.yaml</b>. Then, search for a file name <b>docker-compose.override.yml</b>. Finally, deploys the services contained in both files.\n  </p>\n\n  <p>\n    This is really useful, because if you want to not expose those ports in prod, it is as simple as renaming the override file with any other name. By doing this, we will be deploying only the services in the <b>docker-compose.yml </b>file.&nbsp;\n  </p>\n\n  <p>\n    You can use this in many ways. For instance, you can have a docker-compose.override.example.yml which you can change and rename as <b>docker-compose.override.yml</b>&nbsp;everytime you need to test something in dev. It is similar to when we use a <b>.env-example</b> file. In the <b>.env-example</b> file we have some default or null values which we can change when creating a <b>.env </b>file.\n  </p>\n\n  <p>\n    Another use for the override file is when we are deploying an application in some cloud provider, such as AWS or GCP, which provides some service, as postgres management. If we want to use our own postgres in dev environment, we can use an <b>docker-compose-override.yml </b>file with the postgres service, while in prod, we only use the <b>docker-compose.yml</b>.\n  </p>\n\n  <p>\n    Another way to get modularity is to use the command line:\n  </p>\n<pre class=\"line-numbers  language-yaml\"><code># service.yml\nservices:\n  service:\n    image: my-image:latest</code></pre>\n<pre class=\"line-numbers  language-yaml\"><code># service-dev.yml\nservices:\n  service:\n    environment:\n      - DEV_MODE=true</code></pre>\n<pre class=\"line-numbers  language-bash\"><code>docker-compose -f service.yml -f service-dev.yml up -d</code></pre>\n\n    <h5 id=\"credits-for-this-part\">\n      Credits for this part:\n    </h5>\n\n  <p>\n    <a href=\"https://www.youtube.com/watch?v=jGePPQFArwo\" target=\"_blank\" rel=\"nofollow noopener\">https://www.youtube.com/watch?v=jGePPQFArwo</a>\n  </p>\n\n  <p>\n    <a href=\"https://docs.docker.com/compose/extends/\" target=\"_blank\" rel=\"nofollow noopener\">https://docs.docker.com/compose/extends/</a>\n  </p>\n\n  <p>\n    <a href=\"https://www.howtogeek.com/devops/how-to-simplify-docker-compose-files-with-yaml-anchors-and-extensions/\" target=\"_blank\" rel=\"nofollow noopener\">https://www.howtogeek.com/devops/how-to-simplify-docker-compose-files-with-yaml-anchors-and-extensions/</a>\n  </p>\n\n    <h2 id=\"tip-3-be-lazy-do-not-rewrite-the-same-yaml-parts-over-and-over\">\n      Tip #3: Be lazy, do NOT rewrite the same yaml parts over and over.\n    </h2>\n\n  <p>\n    Use YAML Archors&nbsp;for your yaml files if you are using over and over again the same yaml names or steps.\n  </p>\n\n  <p>\n    There are 2 parts to this:\n  </p>\n\n  <ul>\n    <li>The anchor '&amp;' which defines a chunk of configuration.<br></li><li>The alias '*' used to refer to that chunk elsewhere.<br></li>\n  </ul>\n<pre class=\"line-numbers  language-yaml\"><code>services:\n  httpd:\n    image: httpd:latest\n    restart: &restartpolicy unless-stopped\n  mysql:\n    image: mysql:latest\n    restart: *restartpolicy</code></pre>\n\n  <p>\n    You can reuse multiple lines:\n  </p>\n<pre class=\"line-numbers  language-yaml\"><code>services:\n  first:\n    image: my-image:latest\n    environment: &env\n      - CONFIG_KEY\n      - EXAMPLE_KEY\n      - DEMO_VAR\n  second:\n    image: another-image:latest\n    environment: *env</code></pre>\n\n  <p>\n    Or even extend those chunks of configuration:\n  </p>\n<pre class=\"line-numbers  language-yaml\"><code>services:\n  image: my-image:latest\n    environment: &env\n      - CONFIG_KEY\n      - EXAMPLE_KEY\n      - DEMO_VAR      \n  second:\n    image: another-image:latest\n    environment:\n      &lt;&lt;: *env\n      - AN_EXTRA_KEY\n      - SECOND_SPECIFIC_KEY  </code></pre>\n\n  <p>\n    You can use Yaml Archors with Extension fields, because yaml&nbsp;parser will ignore extension fields prefixed with x-. This way, you can reuse, as I mentioned before, chunks of configuration to share configuration:\n  </p>\n<pre class=\"line-numbers  language-yaml\"><code>x-env: &env\n  environment:\n    - CONFIG_KEY\n    - EXAMPLE_KEY\n \nservices:\n  first:\n    &lt;&lt;: *env\n    image: my-image:latest\n  second:\n    &lt;&lt;: *env\n    image: another-image:latest  </code></pre>\n\n  <p class=\"msg msg--warning\">\n    YAML anchors and aliases cannot contain the ' [ ', ' ] ', ' { ', ' } ', and ' , ' characters.\n  </p>\n\n  <p>\n    Here is a <a href=\"https://www.howtogeek.com/devops/how-to-simplify-docker-compose-files-with-yaml-anchors-and-extensions/\" target=\"_blank\" rel=\"nofollow noopener\" class=\"\" data-link-popup-id=\"1661906797091\">guide</a>, which is the one I used to write this tip.\n  </p>\n\n    <h2 id=\"tip-4-do-not-forget-to-refresh-environment-variables\">\n      Tip #4: Do NOT forget to refresh environment variables.\n    </h2>\n\n  <p>\n    Set the restart behavior to <u>restart: always</u>&nbsp;and configure your services with update_config: true. This way, your environment variables will be refreshed each run.\n  </p>\n\n    <h2 id=\"tip-5-do-not-use-docker-rm-f-when-cleaning-up-docker-images\">\n      Tip #5: Do NOT use \"docker rm -f\" when cleaning up docker images.\n    </h2>\n\n  <p>\n    Use this instead:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>docker rm -f --remove-orphans</code></pre>\n\n  <p>\n    Regardless of whether we or a running container utilizes them, the \"--remove-ophans\" flag guarantees that Docker Compose only removes containers and images that are no longer in use.\n  </p>\n\n    <h2 id=\"tip-6-do-not-let-your-containers-consume-as-much-memory-and-cpu-as-they-want\">\n      Tip #6: Do NOT let your containers consume as much memory and CPU as they want.\n    </h2>\n\n  <p>\n    Although it may seem unusual and silly, you shouldn't allow any container use all the resources it needs.\n  </p>\n\n  <p>\n    You can do this by setting limits:\n  </p>\n<pre class=\"line-numbers  language-yaml\"><code># docker-compose.yml\nweb:\n  deploy:\n    resources:\n      limits:\n        cpus: \"1\"\n</code></pre>\n\n  <p class=\"msg msg--highlight\">\n    Before setting these limits, you should know how many resources your services may need to function properly.\n  </p>\n\n  <p>\n    And those were the best practices I wanted to share with you, fellow DevOps folks. I hope you find them useful.\n  </p>\n\n    <h2 id=\"credits\">\n      Credits\n    </h2>\n\n  <p>\n    <a href=\"https://prod.releasehub.com/blog/6-docker-compose-best-practices-for-dev-and-prod\" target=\"_blank\" rel=\"nofollow noopener\">https://prod.releasehub.com/blog/6-docker-compose-best-practices-for-dev-and-prod</a>\n  </p>",
            "image": "https://baronhez.github.io/media/posts/14/Docker-Logo-2.png",
            "author": {
                "name": "Jonathan Ródenas López"
            },
            "tags": [
                   "Docker-compose",
                   "Docker"
            ],
            "date_published": "2022-08-31T03:23:43+02:00",
            "date_modified": "2022-08-31T03:24:15+02:00"
        },
        {
            "id": "https://baronhez.github.io/how-to-get-a-free-vps-in-oracle-cloud/",
            "url": "https://baronhez.github.io/how-to-get-a-free-vps-in-oracle-cloud/",
            "title": "How to get a free VPS in Oracle Cloud",
            "summary": "How to&hellip;",
            "content_html": "\n  <p>\n    How to get a free VPS in Oracle Cloud with 4 cores, 24 GB of memory and 200 GB of capacity.\n  </p>\n\n  <p>\n    I'll describe how to set up a free virtual server using Oracle Cloud in this post; you may choose to use these machines to test web applications that require a lot more power than shared hosting, or even to mount your own server, to deploy services using docker or Kubernetes.&nbsp;\n  </p>\n\n  <p>\n    First, you will need to create an account at <a href=\"https://www.oracle.com/cloud/sign-in.html\" target=\"_blank\" rel=\"nofollow noopener\">https://www.oracle.com/cloud/sign-in.html</a> with an email address and bank card number (don't worry, it's just to check if your account is real, this is still free, they will charge you around 1$ and then they will give it back to you).\n  </p>\n\n  <p>\n    You must enter the administration console and select the option \"Create a VM instance\":\n  </p>\n\n    <figure class=\"post__image post__image--full\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/13/oracle.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/13/responsive/oracle-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/oracle-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/oracle-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/oracle-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/oracle-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/oracle-2xl.PNG 1600w\"  height=\"510\" width=\"1264\" alt=\"\" />\n      <figcaption>Pick that one.</figcaption>\n    </figure>\n\n  <p>\n    Set the instance name next:\n  </p>\n\n    <figure class=\"post__image post__image--wide\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/13/instance-2.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/13/responsive/instance-2-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/instance-2-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/instance-2-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/instance-2-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/instance-2-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/instance-2-2xl.PNG 1600w\"  height=\"174\" width=\"901\" alt=\"\" />\n      \n    </figure>\n\n  <p>\n    Now, placement:\n  </p>\n\n    <figure class=\"post__image post__image--wide\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/13/instance-3.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/13/responsive/instance-3-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/instance-3-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/instance-3-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/instance-3-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/instance-3-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/instance-3-2xl.PNG 1600w\"  height=\"145\" width=\"1081\" alt=\"\" />\n      <figcaption>Leave it as it is</figcaption>\n    </figure>\n\n  <p>\n    The following part is important:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/13/1.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/13/responsive/1-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/1-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/1-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/1-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/1-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/1-2xl.PNG 1600w\"  height=\"281\" width=\"1642\" alt=\"\" />\n      <figcaption>Click in \"Change image\"</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/13/1-2.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/13/responsive/1-2-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/1-2-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/1-2-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/1-2-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/1-2-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/1-2-2xl.PNG 1600w\"  height=\"114\" width=\"367\" alt=\"\" />\n      <figcaption>Select \"Canonical Ubuntu\"</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/13/1-3.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/13/responsive/1-3-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/1-3-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/1-3-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/1-3-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/1-3-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/1-3-2xl.PNG 1600w\"  height=\"61\" width=\"224\" alt=\"\" />\n      <figcaption>Click on \"Select image\" at the bottom of the screen.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/13/1-5.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/13/responsive/1-5-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/1-5-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/1-5-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/1-5-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/1-5-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/1-5-2xl.PNG 1600w\"  height=\"180\" width=\"1625\" alt=\"\" />\n      <figcaption>Click on \"Change shape\"</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/13/1-4.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/13/responsive/1-4-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/1-4-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/1-4-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/1-4-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/1-4-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/1-4-2xl.PNG 1600w\"  height=\"137\" width=\"1654\" alt=\"\" />\n      <figcaption>Click on \"Ampere\" option</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/13/1-6.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/13/responsive/1-6-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/1-6-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/1-6-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/1-6-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/1-6-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/1-6-2xl.PNG 1600w\"  height=\"233\" width=\"1584\" alt=\"\" />\n      <figcaption>Set it to the maximum \"4 cores, 24 GB memory\"</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/13/1-7.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/13/responsive/1-7-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/1-7-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/1-7-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/1-7-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/1-7-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/1-7-2xl.PNG 1600w\"  height=\"55\" width=\"216\" alt=\"\" />\n      <figcaption>Then, once again, click on \"Select shape\"</figcaption>\n    </figure>\n\n  <p>\n    Now, generate a SSH key pair. If you do not know how to do it, go to <a href=\"https://baronhez.github.io/how-to-configure-ssh-to-be-secure/\" target=\"_blank\">my post about SSH</a> and learn how to do it.\n  </p>\n\n  <p>\n    Once you have your SSH key pair fresh, regardless of the operating system you are using, check this option and upload your public key:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/13/1-8.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/13/responsive/1-8-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/1-8-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/1-8-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/1-8-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/1-8-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/1-8-2xl.PNG 1600w\"  height=\"236\" width=\"956\" alt=\"\" />\n      <figcaption>Click on \"Upload public key files (.pub)\"</figcaption>\n    </figure>\n\n  <p>\n    Location of your SSH keys in different OS:\n  </p>\n\n  <ul>\n    <li><b>Windows:</b> Should be in <i>%userprofile%\\.shh</i></li><li><b>Linux:</b>&nbsp;<i>~/.ssh&nbsp;</i></li><li><b>MacOS:</b>&nbsp;<i>~/.ssh</i>&nbsp;</li>\n  </ul>\n\n  <p>\n    Upload the file named <b>id_rsa.pub</b> (this is the default name, if you haven't changed it).\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/13/1-9.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/13/responsive/1-9-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/1-9-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/1-9-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/1-9-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/1-9-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/1-9-2xl.PNG 1600w\"  height=\"140\" width=\"749\" alt=\"\" />\n      <figcaption>Click on \"Specify a custom boot volume size\" and then set that to 200 GB.</figcaption>\n    </figure>\n\n  <p>\n    Once the instance configuration is finished, you should see something like this:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/13/1-10.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/13/responsive/1-10-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/1-10-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/1-10-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/1-10-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/1-10-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/1-10-2xl.PNG 1600w\"  height=\"318\" width=\"701\" alt=\"\" />\n      <figcaption>Now that your instance is up and running, it is time to connect via SSH.</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://baronhez.github.io/media/posts/13/1-12.PNG\" sizes=\"100vw\" srcset=\"https://baronhez.github.io/media/posts/13/responsive/1-12-xs.PNG 300w ,https://baronhez.github.io/media/posts/13/responsive/1-12-sm.PNG 480w ,https://baronhez.github.io/media/posts/13/responsive/1-12-md.PNG 768w ,https://baronhez.github.io/media/posts/13/responsive/1-12-lg.PNG 1024w ,https://baronhez.github.io/media/posts/13/responsive/1-12-xl.PNG 1360w ,https://baronhez.github.io/media/posts/13/responsive/1-12-2xl.PNG 1600w\"  height=\"109\" width=\"320\" alt=\"\" />\n      <figcaption>Use your public IP to connect to your server.</figcaption>\n    </figure>\n\n  <p>\n    If you don't know how to use SSH:\n  </p>\n\n  <p>\n    <b>On Linux and MacOS</b>, you should use open-ssh (it is pre-installed in most cases).\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>ssh ubuntu@&lt;your-ip&gt;</code></pre>\n\n  <p>\n    On Windows, use Powershell (Powershell has open-ssh pre-installed, or at least that's the case on my machine. Use something like <a href=\"https://www.siteground.com/tutorials/ssh/putty/\" target=\"_blank\" rel=\"nofollow noopener\">Putty</a> if you get lost following this step).\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>ssh ubuntu@&lt;your-ip&gt; # same as Linux and MacOS</code></pre>\n\n  <p>\n    And that's it, folks! Now you have a free vps with 4 cores, 24 GB of memory, 200 GB of capacity in like 5 minutes more or less. Ease peasy.\n  </p>",
            "image": "https://baronhez.github.io/media/posts/13/oracle-cloud.png",
            "author": {
                "name": "Jonathan Ródenas López"
            },
            "tags": [
                   "Self-hosted"
            ],
            "date_published": "2022-08-31T00:59:24+02:00",
            "date_modified": "2022-08-31T01:25:26+02:00"
        },
        {
            "id": "https://baronhez.github.io/b/",
            "url": "https://baronhez.github.io/b/",
            "title": "Self-Hosting Guide",
            "summary": "I know,&hellip;",
            "content_html": "\n  <p>\n    I know, you want to self host, for instance, your own webpage, but every time you search for info, people only recommend you to use sh*t like NO-IP and third party providers such as Heroku. But that's not what you want, right? You have a Rashberry Pi or some old PC and you intent to host your own services, like your webpage, a torrent server or even some filebrowser to manage storage.\n  </p>\n\n  <p>\n    Ok, then I will save you a lot of hours or researching how to mount everything, how to deal with nginx, how to get https certificates... and I will show you the best way of setting up everything.\n  </p>\n\n    <h2 id=\"prepare-your-server-machine\">\n      Prepare your server machine\n    </h2>\n\n  <p>\n    Firtsly, I will start by getting an ISO of Ubuntu Server (you can use another ISOs, like arch linux or Nix, if you are brave enough).&nbsp;\n  </p>\n\n  <p>\n    <a href=\"https://releases.ubuntu.com/22.04.1/ubuntu-22.04.1-live-server-amd64.iso\" target=\"_blank\" class=\"\" rel=\"nofollow noopener\">https://releases.ubuntu.com/22.04.1/ubuntu-22.04.1-live-server-amd64.iso</a>\n  </p>\n\n  <p>\n    Then, use some program, like <a href=\"https://github.com/pbatard/rufus/releases/download/v3.17/rufus-3.17.exe\" target=\"_blank\" class=\"\" rel=\"nofollow noopener\">Rufus</a> or <a href=\"https://www.balena.io/etcher/\" target=\"_blank\" class=\"\" rel=\"nofollow noopener\">Balena Etcher</a> to flash that ISO into an USB or SD Card (in case you're using a Rashberry Pi).\n  </p>\n\n  <p>\n    If you are not familiar with this, take a look into <a href=\"https://www.youtube.com/watch?v=Wt0Q-DBejIw\" target=\"_blank\" class=\"\" rel=\"nofollow noopener\">this tutorial</a>.\n  </p>\n\n  <p>\n    Ok, now we have an USB or SD Card flashed with our favourite OS for our server. Now it is time to insert that into the server we will be using. If it's possible I recommend you to connect that device to a monitor, in order to see what is happening and make some SSH configurations.\n  </p>\n\n  <p>\n    Once the operating system is installed, we will create a new user and get rid of the default user. (Using the root user for everything is a bad idea).\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>sudo adduser Username\nsudo usermod -aG sudo Username\n</code></pre>\n\n    <h2 id=\"how-to-connect-to-our-machine\">\n      How to connect to our machine\n    </h2>\n\n  <p>\n    Next, we will configure SSH to be able to connect to our device from another pc. This way it is easier to manage the server (and we will be able to disconnect the monitor from the server).\n  </p>\n\n  <p>\n    I have another guide about how configure SSH to be secure and ready to use, go ahead a <a href=\"https://baronhez.github.io/how-to-configure-ssh-to-be-secure/\" target=\"_blank\" class=\"\">check it</a>.\n  </p>\n\n    <h2 id=\"unattended-upgrades-optional\">\n      Unattended upgrades (optional)\n    </h2>\n\n  <p class=\"msg msg--highlight\">\n    If you don't want automated updates, skip this section.\n  </p>\n\n  <p>\n    Ok, now that we are able to connect to the server using SSH, and SSH is configure to be secure, it is time to install our first packages.\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>sudo apt install unattended-upgrades\ndpkg-reconfigure --priority=low unattended-upgrades\n# Now, select yes to enable unattended-upgrades.\n# Once you finish with that, you can change some lines in the configuration of unattended-upgrades.\nnano /etc/apt/apt.conf.d/10periodic\n</code></pre>\n\n  <p>\n    For instance, you can configure something like this:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>APT::Periodic::Update-Package-Lists \"1\";\nAPT::Periodic::Download-Upgradeable-Packages \"1\";\nAPT::Periodic::AutocleanInterval \"7\";\nAPT::Periodic::Unattended-Upgrade \"1\";</code></pre>\n\n    <h2 id=\"email-your-logs-to-yourself-optional\">\n      Email your logs to yourself (optional)\n    </h2>\n\n  <p class=\"msg msg--highlight\">\n    If you don't want to email your logs, skip this section.\n  </p>\n\n  <p>\n    If you want to keep track of your logs and email them to you, then you can use <a href=\"https://linux.die.net/man/8/logwatch\" target=\"_blank\" class=\"\" rel=\"nofollow noopener\">Logwatch</a>.\n  </p>\n\n  <p>\n    To install and configure logwatch, run these commands:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>sudo apt-get install logwatch\nnano /etc/cron.daily/00logwatch</code></pre>\n\n  <p>\n    Then, add this line:\n  </p>\n<pre class=\"line-numbers  language-html\"><code>/usr/sbin/logwatch --output mail --mailto yourmail@gmail.com --detail high  </code></pre>\n\n    <h2 id=\"installation-of-docker-and-dockercompose\">\n      Installation of Docker and Docker-Compose\n    </h2>\n\n  <p class=\"msg msg--info\">\n    The rest of the guide focuses on using docker and docker-compose to deploy services. If you want to deploy your services manually by configuring nginx and cert-manager, go ahead and try it yourself. If you want to do it using kubernetes, I will publish a guide as soon as possible.\n  </p>\n\n  <p>\n    It's time to install docker and docker compose:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>sudo apt update && sudo apt upgrade\nsudo apt install apt-transport-https ca-certificates curl software-properties-common  \ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\nsudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable\"  \napt-cache policy docker-ce\nsudo apt install docker-ce\nsudo systemctl status docker\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.26.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose  \nsudo chmod +x /usr/local/bin/docker-compose\n</code></pre>\n\n  <p>\n    Now,&nbsp;assuming that everything went well, we should have docker and docker-compose installed in our server.&nbsp; It's time to test docker-compose by deploying a small web in our local network.\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>mkdir app\nnano app/index.html\n</code></pre>\n\n  <p>\n    Insert this content into the <b>index.html</b> file:\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Docker Compose Demo&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/kognise/water.css@latest/dist/dark.min.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n\t&lt;h1&gt;This is a Docker Compose Demo Page.&lt;/h1&gt;\n\t&lt;p&gt;This content is being served by an Nginx container.&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n  <p>\n    Save the file, and run the following command:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>nano docker-compose.yml</code></pre>\n\n  <p>\n    Insert this content into the <b>docker-compose.yml</b> file:\n  </p>\n<pre class=\"line-numbers  language-yaml\"><code>version: '3.7'\nservices:\n  web:\n    image: nginx:alpine\n    ports:\n      - \"8000:80\"\n    volumes:\n      - ./app:/usr/share/nginx/html</code></pre>\n\n  <p>\n    Now, to start our aplication&nbsp;containerized, we must run the following command:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>docker-compose up -d\n</code></pre>\n\n  <p>\n    That command should return an output like this one:\n  </p>\n<pre class=\"line-numbers  language-html\"><code>Creating network \"compose-demo_default\" with the default driver\nPulling web (nginx:alpine)...\nalpine: Pulling from library/nginx\ncbdbe7a5bc2a: Pull complete\n10c113fb0c77: Pull complete\n9ba64393807b: Pull complete\nc829a9c40ab2: Pull complete\n61d685417b2f: Pull complete\nDigest: sha256:57254039c6313fe8c53f1acbf15657ec9616a813397b74b063e32443427c5502\nStatus: Downloaded newer image for nginx:alpine\nCreating compose-demo_web_1 ... done</code></pre>\n\n  <p>\n    Now, your webpage should be accesible through your browser by typing \"local-IP-of-your-server:8000\".\n  </p>\n\n  <p>\n    Ok, now that we have a webpage deployed in our local network, I should share a few useful commands to manage Docker:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code># We can see the logs of our containers\ndocker-compose logs\n# Pause our containers\ndocker-compose pause\n# Unpause our containers\ndocker-compose unpause\n# Stop our containers\ndocker-compose stop\n# Delete all the resources and volumes assigned to our containers\ndocker-compose down\n# List our images\ndocker images\n# Delete our images\ndocker image rm nginx:alpine\n# Or\ndocker rmi nginx:alpine\n# We can delete all stoped container, every network not use by al least one container, every unused image and all build cache.\ndocker system prune -a\n# Do the same but filtering specific images\ndocker system prune --filter nginx:alpine\n# Or just the volumes\ndocker system prune --volumes\n# Or we can do the same but without asking for confirmation\ndocker system prune -a -f  \n</code></pre>\n\n  <p>\n    Now, if you want to deploy you web to the world outside your local network, you must change a few things in your router (supposing you have access to the router). It is completely necessary to set port-forwarding, because if you are mounting your server at home, your devices are connected inside your home using a private network. It is possible for us to connect to the internet thanks to <a href=\"https://en.wikipedia.org/wiki/Network_address_translation\" rel=\"nofollow noopener\">NAT</a>.&nbsp;\n  </p>\n\n  <p>\n    Each router is a different world, so you must search information about how to port-forward in your home router.&nbsp;\n  </p>\n\n  <p>\n    On the other hand, if you're using some provider for your server, such as a VM in Oracle Cloud, then it should be easier. Search for your specific provider how to port-forward and that's the end of the problem.\n  </p>\n\n    <h2 id=\"using-a-domain-name-and-ddns\">\n      Using a domain name and DDNS\n    </h2>\n\n  <p>\n    Ok, if you want to access your webpage easily without having to memorize a bunch of numbers, you have to buy a domain name. I recommend&nbsp;<a href=\"https://www.namecheap.com/\" target=\"_blank\" class=\"\" data-link-popup-id=\"1661636146747\">https://www.namecheap.com/</a>. It provides cheap domain names and it is also a DNS provider, but you can pick whichever you want.\n  </p>\n\n  <p>\n    If you want to point your domain name to your server, there is one problem if your server is in your home. Most ISPs (or all of them, to be honest) nowadays change your public IP from time to time. If you don't want to lose access to your webpage when that happens, we must use Dynamic DNS. It is necessary to set DDNS with your DNS provider and use a DDNS client in our server to comunicate with our DNS provider. The DDNS client will inform the DNS provider of your new IP.\n  </p>\n\n  <p>\n    I use <a href=\"https://ddclient.net/\" target=\"_blank\" rel=\"nofollow noopener\">ddclient</a> for that, because Namecheap has a <a href=\"https://www.namecheap.com/support/knowledgebase/article.aspx/583/11/how-do-i-configure-ddclient/\" target=\"_blank\" rel=\"nofollow noopener\">guide</a> to use it with them.\n  </p>\n\n    <h2 id=\"using-https-certificates-from-lets-encrypt\">\n      Using HTTPS certificates from Let's Encrypt\n    </h2>\n\n  <p>\n    Next step is to create HTTPS certificates for our webpage. The docker way of doing this is by configurating let's encrypt. We can do it using different methods, but the best for me is using one of the best&nbsp;Edge Router nowadays. I'm talking of <a href=\"https://doc.traefik.io/traefik/\" target=\"_blank\" rel=\"nofollow noopener\"><u>Traefik</u></a>.\n  </p>\n\n  <p>\n    I will save you tons of documentation, because this guide is already too long. If you want to set a reverse proxy with traefik which also can generate certificates with Let's Encrypt, just use this files:\n  </p>\n\n  <p>\n    First, create an acme.json file and change its privilegies (take into account the path of the acme.json file, because you have to add that path to the <b>docker-compose.yaml</b> file:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>touch acme.json\nchmod 600 acme.json</code></pre>\n\n  <p>\n    Now, create a folder and two different files for traefik configuration (put your domain name where it says YOUR-DOMAIN-NAME and your preferred email where it says youremail@example.com):\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>mkdir ./config\nnano ./config/traefik.yml</code></pre>\n<pre class=\"line-numbers  language-yaml\"><code># traefik.yml\napi:\n  dashboard: true # Enable the dashboard\nentryPoints:\n  web:\n    address: \":80\"\n    http:\n      redirections:\n        entryPoint:\n          to: web-secure\n  web-secure:\n    address: \":443\"\n    http:\n      tls:\n        certResolver: default\nproviders:\n        # In order to get this working on docker, refer to https://doc.traefik.io/traefik/providers/docker/ for more info.\n  docker:\n    endpoint: \"unix:///var/run/docker.sock\"\n    exposedByDefault: false # As seen in the documentation, \"Expose containers by default through Traefik. If set to false, containers that do not have a traefik.enable=true label are ignored from the resulting routing configuration\".\n  file:\n    filename: /etc/traefik/config.yml # In order to get all my configuration info in a separate file (dinamic.yaml), I use https://doc.traefik.io/traefik/providers/file/.\n    watch: true # Watch for changes\n    \ncertificatesResolvers: # Refer to https://doc.traefik.io/traefik/https/acme/#certificate-resolvers to more info. \n  default:\n    acme:\n      email: youremail@example.com \n      storage: /etc/traefik/acme/acme.json # Previously you have to create the file, change the permissions using chmod and then use a docker volume.\n      keyType: 'EC384' # \n      tlsChallenge: true # https://doc.traefik.io/traefik/https/acme/#tlschallenge\n</code></pre>\n\n  <p>\n    Now, we have to configure one last yaml file&nbsp;(put your domain name where it says YOUR-DOMAIN-NAME):\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>nano ./config/config.yml</code></pre>\n<pre class=\"line-numbers  language-yaml\"><code># config.yml\nhttp:\n  routers:\n    traefik:\n      rule: Host(`subdomainForTheDashboard.YOUR-DOMAIN-NAME`)\n      entryPoints: \n        - \"web-secure\"\n      service: api@internal\n      middlewares:\n        - secHeader\n      tls:\n        certResolver: default\n  middlewares:\n          # In order to modify the request, I use middlewares. In this case to force https.\n    secHeader:\n        # HSTS / Secure Headers, Useful to have a more secure experience with HTTPS\n      headers:\n        accessControlMaxAge: \n          - 100\n        hostsProxyHeaders:\n          - \"X-Forwarded-Host\"\n        forceSTSHeader: true\n        frameDeny: true\n        sslRedirect: true\n        browserXssFilter: true      \n        contentTypeNosniff: true\n        customFrameOptionsValue: \"allow-from https:YOUR-DOMAIN-NAME\"\n        referrerPolicy: \"same-origin\"\n        stsIncludeSubdomains: true\n        stsPreload: true\n        stsSeconds: 31536000\n        featurePolicy: \"camera 'none'; geolocation 'none'; microphone 'none'; payment 'none'; usb 'none'; vr 'none';\"\n        customResponseHeaders:\n          X-Robots-Tag: \"none,noarchive,nosnippet,notranslate,noimageindex,\"\n          server: \"YOUR-DOMAIN-NAME\"\ntls:\n        # Now, I refer to https://doc.traefik.io/traefik/https/tls/ for information. \n        # Options allow me to to configure some parameters of the TLS connection.\n  options:\n    default:\n            # Now, here a use the min Version tls version 1.2 just as shown in the traefik documentation (This config will get an A+ grade in https://www.ssllabs.com/ssltest/) \n      minVersion: VersionTLS12 # Refering to the Traefik Documentation, I use sniStrict because \"Traefik won't allow connections from clients that do not specify a server_name extension or don't match any certificate configured on the tlsOption\".\n      sniStrict: true\n      cipherSuites:\n        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n        - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n        - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n        - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384   # TLS 1.2\n        - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305    # TLS 1.2\n        - TLS_AES_256_GCM_SHA384                  # TLS 1.3\n        - TLS_CHACHA20_POLY1305_SHA256            # TLS 1.3\n        # Now I define the eliptic curves preferences for ECC cryptography\n        # Refer to https://pkg.go.dev/crypto/tls#CurveID for more info\n      curvePreferences:\n        - CurveP521\n        - CurveP384\n    mintls13:\n      minVersion: VersionTLS13\n      sniStrict: true\n</code></pre>\n\n  <p>\n    Ok, this configuration should work flawlessly. You can add more middlewares, such as rate limit or plugins like fail2ban. I'm not covering that here right now.\n  </p>\n\n  <p>\n    Lastly, a <b>docker-compose.yaml</b>(put your domain name where it says YOUR-DOMAIN-NAME and put the path to your acme.json file and your webpage folder):\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>nano docker-compose.yaml</code></pre>\n<pre class=\"line-numbers  language-yaml\"><code>version: '3.7'\nservices:\n  traefik:\n    image: traefik:2.5.5\n    container_name: traefik\n    network_mode: host\n    restart: unless-stopped\n    volumes:\n      - ./config/:/etc/traefik/\n      - /path/to/acme.json:/etc/traefik/acme/acme.json\n      - /var/run/docker.sock:/var/run/docker.sock\n  web:\n    image: nginx:1.21.4-alpine\n    container_name: web\n    restart: always\n    expose:\n      - \"80\"\n    volumes:\n      - /path/to/your/webpage/folder:/usr/share/nginx/html:ro\n    labels:\n      - traefik.enable=true\n      - traefik.http.routers.webpage.entryPoints=web-secure\n      - traefik.http.routers.webpage.rule=Host(`YOUR-DOMAIN-NAME`)\n      - \"traefik.http.routers.webpage.middlewares=secHeader@file\"\n</code></pre>\n\n  <p>\n    If you want to deploy more services, just add this to every new service in a docker-compose file:\n  </p>\n<pre class=\"line-numbers  language-yaml\"><code> labels:\n      - traefik.enable=true\n      - traefik.http.routers.NAME-ROUTER.entryPoints=web-secure\n      - traefik.http.routers.NAME-ROUTER.rule=Host(`YOUR-DOMAIN-NAME`)\n      - \"traefik.http.routers.NAME-ROUTER.middlewares=secHeader@file\"</code></pre>\n\n  <p>\n    Just remember to change NAME-ROUTER to another name each time (it is the name of the <a href=\"https://doc.traefik.io/traefik/routing/routers/\" rel=\"nofollow noopener\" class=\"\" target=\"_blank\">traefik router</a>) and YOUR-DOMAIN-NAME should be a subdomain, such as <b>nextcloud.example.com</b>&nbsp;for a hipothetical nextcloud service.\n  </p>\n\n  <p>\n    To deploy this configuration, go to the folder where the <b>docker-compose.yaml</b> file is, and run the following command:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>sudo docker-compose up -d</code></pre>\n\n  <p>\n    If you go to your domain, assuming that you previouly pointed the domain to your server IP (or the public IP of your router, in case of a home server), the webpage should be displayed in the browser as intended.\n  </p>\n\n  <p>\n    That's it, you have started in the selfhosting hobby. I recommend you this <a href=\"https://www.reddit.com/r/selfhosted/\" rel=\"nofollow noopener\">subreddit</a>.\n  </p>\n\n  <p>\n    Good luck, lads.\n  </p>",
            "image": "https://baronhez.github.io/media/posts/11/young-man-engineer-making-program-analyses.jpg",
            "author": {
                "name": "Jonathan Ródenas López"
            },
            "tags": [
                   "Self-hosted",
                   "SSH",
                   "Docker"
            ],
            "date_published": "2022-08-28T02:48:46+02:00",
            "date_modified": "2022-09-03T00:04:34+02:00"
        }
    ]
}
